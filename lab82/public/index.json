[
{
	"uri": "//localhost:1313/1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Before we get to the main content of this workshop, we need to reset the web application.\nDownload the below source code Source code\rfcj-book-store-sam-ws5.zip\r(8258 ko)\rRun the below commands\nsam build\rsam deploy --guided Enter the following content:\nStack Name []: fcj-book-shop AWS Region []: us-east-1 Confirm changes before deploy [Y/n]: y Allow SAM CLI IAM role creation [Y/n]: y Disable rollback [y/N]: n BooksList may not have authorization defined, Is this okay? [y/N]: y BookCreate may not have authorization defined, Is this okay? [y/N]: y BookDelete may not have authorization defined, Is this okay? [y/N]: y Save arguments to configuration file [Y/n]: y Open AWS APIs Gateway console. Then click API Gateway REST API to Lambda Click Stage on the left menu\nClick staging Record the InvokeURL Run the below command to download the source code of FCJ-Serverless-Workshop to your device\ngit clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git Open config.js file, replace value of APP_API_URL with InvokeURL Run the below commands to build project\ncd FCJ-Serverless-Workshop\ryarn build We have finished building the front-end. Next, run the below command to upload build folder to S3 bucket\naws s3 cp build s3://fcj-book-shop --recursive So we have rebuilt the web application.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Serverless - Setting up SSL for your serverless app",
	"tags": [],
	"description": "",
	"content": "Serverless - Setting up SSL for your serverless app Overview In this workshop in the serverless series, we will set up website application to be more sercure in transit by using an SSL certificate. An SSL Certificate allows traffic between a user and a website application hosted on an S3 bucket to be encrypted in transit (in-flight encryption).\nThe architecture of the web application will look like this: AWS Certificate Manager: manage SSL certificates Amazon Route 53: provide custom domain Amazon CloudFront: allows us to use SSL certificate to serve web with HTTPS AWS Certificate Manager AWS Certificate Manager (ACM) handles the complexity of creating, storing, and renewing public and private SSL/TLS X.509 certificates and keys that protect your AWS websites and applications. You can provide certificates for your integrated AWS services either by issuing them directly with ACM or by importing third-party certificates into the ACM management system\nAmazon Route 53 Amazon Route 53 is website service for Domain Name System (DNS) in the cloud. This service is highly available and scalable, disigned for developers and businessees, a reliable and cost-effective way of routing for end users as well as Internet applications by switching domains, such as www.example.com to the IP address (192.0.2.1)\nSome feature of Amazon Route 53:\nEfficiently connect user requests to infrastructure running in AWS – like Amazon EC2 instances, Elastic Load Balancing load balancers, or Amazon S3 repositories Routing users to infrastructure outside of AWS Configure DNS health checks to route traffic to qualified endpoints Independently monitor the health of applications and endpoints One component that we\u0026rsquo;ll be using for Route 53 is the Hosted zone - which is a container of records that defines how to route traffic to a domain of its subdomains.\nAmazon CloudFront Amazon CloudFront is a web service that speeds up distribution of your static and dynamic web content, such as .html, .css, .js, and image files, to your users. CloudFront delivers your content through a worldwide network of data centers called edge locations. When a user requests content that you\u0026rsquo;re serving with CloudFront, the request is routed to the edge location that provides the lowest latency (time delay), so that content is delivered with the best possible performance.\nA simple approach for storing and delivering static content is to use an Amazon S3 bucket. Using S3 together with CloudFront has a number of advantages, including the option to use origin access control to easily restrict access to your S3 content.\nContent Preparation Create Domain and Hosted zone Request SSL certificate Create CloudFront distribution Cleanup "
},
{
	"uri": "//localhost:1313/2-create-domain-hosted-zone/",
	"title": "Create Domain and Hosted zone",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a Domain and Hosted zone with Amazon Route 53.\nDomain creation will cost you.\nOpen Amazon Route 53\nSelect Registered domains on the left menu\nClick Register Domain Enter the domain name you want to create, ví dụ: fcjbookshop\nSelect the appropriate Top Level Domain Click Search to check the domain name is available Click Selected Then click Proceed to checkout Uncheck to off Auto-renew the domain after it expires Enter your personal information At Terms and Conditions section, check to agree to the terms\nClick Submit Wait for a while, your domain will be ready to use\nSelect Registered domains on the left menu Open your email provied above, click to link to verify the domain registration information from noreply@registrar.amazon.com After the domain is registered successfully, the hosted zone will be create\nSelect Hosted zones on the left menu We are done creating a hosted name, next step we will request a SSL certificate with AWS Certificate Manager "
},
{
	"uri": "//localhost:1313/3-request-certification/",
	"title": "Request SSL certificate",
	"tags": [],
	"description": "",
	"content": " Open AWS Certificate Manager console The required region to generate the certificate is N.Virginia (us-east-1)\nClick Request a certificate Click Next Enter the domain name: *.fcjbookshop.click\nClick Add another name to this certificate Enter another domain name: fcjbookshop.click Click Request button Click to certificate you just created\nWait for moment to to initialize the CNAME for the domain, then click Create records in 53 Click Create records Wait for moment to AWS confirm your domain, after successful confirmation change the status to Success We have successfully requested an SSL certificate. This certificate will be used by CloudFront in the next step.\n"
},
{
	"uri": "//localhost:1313/4-create-cloud-front/",
	"title": "Create CloudFront distribution",
	"tags": [],
	"description": "",
	"content": " Open Amazon CloudFront console. Then click Create distribution Select the origin domain is fcj-book-shop bucket Select Legacy access identities to just allow access to the S3 bucket from CloudFront\nClick Create new OAI Click Create Select OAI you just created\nSelect Yes, update the bucket policy Scroll down, in Default cache behavior section, select Redirect HTTP to HTTPS for Viewer protocol policy Scroll down, in Settings section, click Add item\nEnter CNAME: www.fcjbookshop.click and fcjbookshop.click Select the SSL certificate you created in previous step Scroll down to bottom, enter index.html for Default root object pattern\nClick Create distribution Go back to the Route 53 console\nClick Create record Enter www for Record name\nTurn on Alias Select Alias to CloudFront distribution Click Create records The record have created Enter the following links in a new tab in your web browser: http://DOMAIN, http://www.DOMAIN, replace all DOMAIN with your domain name. All those links redirect to the new path, replace http with https "
},
{
	"uri": "//localhost:1313/5-cleanup/",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": " Empty S3 bucket Open AWS S3 console Select fcj-book-store Click Empty Enter permanently delete Click Empty Do the same for bucket starting with aws-sam-cli-managed-default- Delete CloudFormation stacks Execute the below command to delete the AWS SAM application sam delete --stack-name fcj-book-store\rsam delete --stack-name aws-sam-cli-managed-default Delete CloudFront distribution Open Amazon CloudFront console Select the currently displayed distribution Click Disable Click Disable again Wait for distribution to be disabled Select distribution again and click Delete Click Delete again Delete SSL certificate Open AWS Certificate Manager console Select created certificate Click Delete Click Delete again Delete Hosted zone Open Amazon Route 53 console Click created hosted zone Select records whose type is different from NS and SOA Click Delete records Click Delete Click Delete zone Enter delete Click Delete "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]