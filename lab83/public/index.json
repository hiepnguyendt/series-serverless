[
{
	"uri": "//localhost:1313/2-create-sqs-and-sns/2-1-create-sqs/",
	"title": "Create queue",
	"tags": [],
	"description": "",
	"content": " Open Amazon SQS console Click Create queue Select Stardard for queue type Enter queue name: checkout-queue Scroll down, click Create queue Click Send and receive messages Enter message content, such as: The first order Click Send to send message to queue Click Poll message to receive all message sent to queue Click to the message is showing The message content is displayed Ấn Done Check to this message Click Delete to delete message Click Delete "
},
{
	"uri": "//localhost:1313/1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Before we get to the main content of this workshop, we need to reset the web application.\nDownload the below source code Source code\rfcj-book-store-sam-ws6.zip\r(8269 ko)\rRun the below commands sam build\rsam deploy --guided Enter the following content: Stack Name []: fcj-book-store AWS Region []: ap-southeast-1 Confirm changes before deploy [Y/n]: y Allow SAM CLI IAM role creation [Y/n]: y Disable rollback [y/N]: n BooksList may not have authorization defined, Is this okay? [y/N]: y BookCreate may not have authorization defined, Is this okay? [y/N]: y BookDelete may not have authorization defined, Is this okay? [y/N]: y Login may not have authorization defined, Is this okay? [y/N]: y Register may not have authorization defined, Is this okay? [y/N]: y ConfirmUser may not have authorization defined, Is this okay? [y/N]: y Save arguments to configuration file [Y/n]: y Open AWS APIs Gateway console\nClick API Gateway REST API to Lambda\nClick Stage on the left menu Click staging Record the InvokeURL Run the below command to download the source code of FCJ-Serverless-Workshop to your device git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git Run the below commands to build project cd FCJ-Serverless-Workshop\ryarn build We have finished building the front-end. Next, run the below command to upload build folder to S3 bucket aws s3 cp build s3://fcj-book-store --recursive So we have rebuilt the web application.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Serverless - Processing orders with SQS and SNS",
	"tags": [],
	"description": "",
	"content": "Serverless - Processing orders with SQS and SNS Overview In the workshop 6 of this series, we will process user orders using Amazon SQS and SNS. When user places an order, the order will be send to the queue and SNS will notify the admin about about the new order. Admin has the right to view all orders and process or delete them.\nThe architecture of the web application: When user places an order (click Checkout), the POST API /books/order puts the order\u0026rsquo;s information into a queue you create, then pulish a message via Amazon SNS topic GET API /books/order is called when admin uses order management to get all pending and processed orders in DynamoDB table When the Admin processes the order (click Handle), the POST API /books/order/handle will write the order to DynamoDB and remove it from the queue When Admin deletes an order (press Delete), DELETE API /books/order will remove the order from the queue Amazon Simple Queue Service Amazon Simple Queue Service (Amazon SQS) offers a secure, durable, and available hosted queue that lets you integrate and decouple distributed software systems and components. It can scale independently from our application. It provides a generic web services API that you can access using any programming language that the AWS SDK supports.\nThere are three main parts in a distributed messaging system: the components of your distributed system, your queue (distributed on Amazon SQS servers), and the messages in the queue. Example: your system has several producers (components that send messages to the queue) and consumers (components that receive messages from the queue). The queue (which holds messages) stores the messages on Amazon SQS servers.\nAmazon Simple Notification Service Amazon Simple Notification Service (Amazon SNS) is a managed service that provides message delivery from publishers to subscribers (also known as producers and consumers). Publishers communicate asynchronously with subscribers by sending messages to a topic, which is a logical access point and communication channel. Clients can subscribe to the SNS topic and receive published messages using a supported endpoint type, such as Amazon Kinesis Data Firehose, Amazon SQS, AWS Lambda, HTTP, email, mobile push notifications, and mobile text messages (SMS).\nContent Preparation Create queue and SNS topic Create API and Lambda function Test web operation Cleanup "
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-1-create-lambda-function/",
	"title": "Tạo Lambda function",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo một bảng DynamoDB mới để lưu dữ liệu đơn hàng đã được xử lý và bốn Lambda function để lưu đơn hàng, quản lý đơn hàng, xoá đơn hàng, xử lý đơn hàng bằng SAM template.\nMở tệp template.yaml của thư mục source code fcj-book-store-sam-ws6 đã tải về Thêm đoạn script dưới đây để tạo một bảng Orders trong DynamoDB. OrdersTable:\rType: AWS::Serverless::SimpleTable\rProperties:\rTableName: Orders\rPrimaryKey:\rName: id\rType: String Chạy các lệnh dưới đây sam build\rsam deploy --guided Mở bảng điều khiển của AWS DynamDB để kiểm tra Thêm đoạn script dưới đây để tạo function CheckOutOrder CheckOutOrder:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: checkout_order\rCodeUri: fcj-book-store/checkout_order\rHandler: checkout_order.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- sqs:*\rResource:\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\r- Sid: VisualEditor1\rEffect: Allow\rAction:\r- sns:Publish\rResource:\r- !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:order-notice\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Thêm đoạn script dưới đây để tạo function OrderManagement OrderManagement:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: order_management\rCodeUri: fcj-book-store/order_management\rHandler: order_management.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- sqs:*\rResource:\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\r- Sid: VisualEditor1\rEffect: Allow\rAction:\r- dynamodb:Query\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Orders\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Thêm đoạn script dưới đây để tạo function HandleOrder HandleOrder:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: handle_order\rCodeUri: fcj-book-store/handle_order\rHandler: handle_order.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- dynamodb:PutItem\r- dynamodb:BatchWriteItem\r- sqs:*\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Orders\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Thêm đoạn script dưới đây để tạo function DeleteOrder DeleteOrder:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: delete_order\rCodeUri: fcj-book-store/delete_order\rHandler: delete_order.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- sqs:*\r- dynamodb:DeleteItem\rResource:\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Orders\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Thêm các thư mục và tệp source code cho các function. Cấu trúc thư mục như sau: fcj-book-store-sam-ws6\r├── fcj-book-store\r│ ├── checkout_order\r│ │ └── checkout_order.py\r│ ├── order_management\r│ │ └── order_management.py\r│ ├── handle_order\r│ │ └── handle_order.py\r│ ├── delete_order\r│ │ └── delete_order.py\r│ ├── ....\r└── template.yaml Tạo thư mục tên checkout_order trong thư mục fcj-book-store-sam-ws6/fcj-book-store Tạo tệp checkout_order.py và sao chép đoạn code sau vào nó. import json\rimport boto3\rimport os\rdef lambda_handler(event, context):\rclient = boto3.client(\u0026#34;sqs\u0026#34;)\rsns = boto3.client(\u0026#39;sns\u0026#39;)\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rstatus = 200\rtry:\rresponse = client.get_queue_url(\rQueueName=queue_name\r)\rsend_response = client.send_message(\rQueueUrl=response[\u0026#39;QueueUrl\u0026#39;], MessageBody=event[\u0026#34;body\u0026#34;]\r)\rexcept Exception as e:\rstatus = 400\rtry:\rresponse1 = sns.publish(\rTopicArn=os.environ[\u0026#39;SNS_ARN\u0026#39;], Message=\u0026#34;There is a new order. Please check it!\u0026#34;, )\rexcept Exception as e:\rstatus = 400\rprint(e)\rreturn {\r\u0026#39;statusCode\u0026#39;: status,\r\u0026#39;body\u0026#39;: json.dumps(response[\u0026#34;ResponseMetadata\u0026#34;]),\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r}\r} Tạo thư mục tên order_management trong thư mục fcj-book-store-sam-ws6/fcj-book-store Tạo order_management.py và sao chép đoạn code sau vào nó. import boto3\rimport json\rimport os\rfrom boto3.dynamodb.types import TypeDeserializer\r# Create SQS client\rsqs_client = boto3.client(\u0026#39;sqs\u0026#39;)\r# Create DynamoDB client\rdynamodb_client = boto3.client(\u0026#39;dynamodb\u0026#39;)\rserializer = TypeDeserializer()\rdef deserialize(data):\rif isinstance(data, list):\rreturn [deserialize(v) for v in data]\rif isinstance(data, dict):\rtry:\rreturn serializer.deserialize(data)\rexcept TypeError:\rreturn {k: deserialize(v) for k, v in data.items()}\relse:\rreturn data\rdef format_db_data(messages, db_data):\rif \u0026#39;Items\u0026#39; in db_data:\rformat_data = deserialize(db_data[\u0026#34;Items\u0026#34;])\rprice = 0\rfor book_item in format_data:\rprice = book_item[\u0026#39;price\u0026#39;]\rdel book_item[\u0026#39;price\u0026#39;]\rdel book_item[\u0026#39;id\u0026#39;]\rmessages.append({\r\u0026#34;receiptHandle\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;books\u0026#34;: format_data,\r\u0026#34;price\u0026#34;: price,\r\u0026#34;status\u0026#34;: \u0026#34;Processed\u0026#34;\r})\rdef get_order_from_dynamodb(messages):\rdata = []\ri = 1\rwhile True:\rid = str(i)\rdata = dynamodb_client.query(\rTableName=\u0026#34;Orders\u0026#34;, KeyConditionExpression=\u0026#34;id = :id\u0026#34;, ExpressionAttributeValues={\u0026#34;:id\u0026#34;: {\u0026#34;S\u0026#34;: id}})\rif not data[\u0026#34;Items\u0026#34;]:\rbreak\rformat_db_data(messages, data)\ri += 1\rdef get_order_from_sqs(messages):\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rqueue = sqs_client.get_queue_url(QueueName=queue_name)\rqueue_url = queue[\u0026#39;QueueUrl\u0026#39;]\rresponse = sqs_client.get_queue_attributes(\rQueueUrl=queue_url,\rAttributeNames=[\u0026#39;ApproximateNumberOfMessages\u0026#39;]\r)\rnumber_of_message = int(\rresponse[\u0026#39;Attributes\u0026#39;][\u0026#39;ApproximateNumberOfMessages\u0026#39;])\rprint(number_of_message)\ri = 0\rwhile i \u0026lt; number_of_message:\rmsg_list = sqs_client.receive_message(\rQueueUrl=queue_url,\rMaxNumberOfMessages=10,\rWaitTimeSeconds=20,\rVisibilityTimeout=3\r)\rif \u0026#39;Messages\u0026#39; in msg_list:\rfor m in msg_list[\u0026#39;Messages\u0026#39;]:\rprint(json.loads(m[\u0026#34;Body\u0026#34;]))\rmessages.append({\r\u0026#34;receiptHandle\u0026#34;: m[\u0026#34;ReceiptHandle\u0026#34;],\r\u0026#34;books\u0026#34;: json.loads(m[\u0026#34;Body\u0026#34;])[\u0026#39;books\u0026#39;],\r\u0026#34;price\u0026#34;: json.loads(m[\u0026#34;Body\u0026#34;])[\u0026#39;price\u0026#39;],\r\u0026#34;status\u0026#34;: \u0026#34;Unprocessed\u0026#34;\r})\ri += 1\rdef lambda_handler(event, context):\rmessages = []\rget_order_from_dynamodb(messages)\rget_order_from_sqs(messages)\rprint(messages)\rreturn{\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: json.dumps(messages),\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\r} Tạo thư mục tên handle_order trong thư mục fcj-book-store-sam-ws6/fcj-book-store Tạo handle_order.py và sao chép đoạn code sau vào nó. import boto3\rimport json\rimport os\rdynamodb_client = boto3.resource(\u0026#39;dynamodb\u0026#39;)\rtable = dynamodb_client.Table(\u0026#39;Orders\u0026#39;)\rsqs_client = boto3.client(\u0026#39;sqs\u0026#39;)\rdef lambda_handler(event, context):\rorder_item = json.loads(event[\u0026#34;body\u0026#34;])\rproducts_infor = order_item[\u0026#39;books\u0026#39;]\rprint(order_item)\rfor book_item in products_infor:\rprint(book_item)\rdata = {\r\u0026#34;id\u0026#34;: str(order_item[\u0026#39;id\u0026#39;]),\r\u0026#34;book_id\u0026#34;: book_item[\u0026#39;id\u0026#39;],\r\u0026#34;name\u0026#34;: book_item[\u0026#39;name\u0026#39;],\r\u0026#34;qty\u0026#34;: str(book_item[\u0026#39;qty\u0026#39;]),\r\u0026#34;price\u0026#34;: str(order_item[\u0026#39;price\u0026#39;])\r}\rprint(data)\rtable.put_item(Item=data)\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rqueue = sqs_client.get_queue_url(QueueName=queue_name)\rqueue_url = queue[\u0026#39;QueueUrl\u0026#39;]\rresponse = sqs_client.delete_message(\rQueueUrl=queue_url,\rReceiptHandle=order_item[\u0026#39;receiptHandle\u0026#39;]\r)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: \u0026#39;successfully handle order!\u0026#39;,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r}\rreturn response Tạo thư mục tên delete_order trong thư mục fcj-book-store-sam-ws6/fcj-book-store Tạo tệp delete_order.py và sao chép đoạn code sau vào nó. import boto3\rimport json\rimport os\rdynamodb_client = boto3.client(\u0026#39;dynamodb\u0026#39;)\rsqs_client = boto3.client(\u0026#39;sqs\u0026#39;)\rdef lambda_handler(event, context):\rorder_item = json.loads(event[\u0026#34;body\u0026#34;])\rif order_item[\u0026#39;receiptHandle\u0026#39;]:\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rqueue = sqs_client.get_queue_url(QueueName=queue_name)\rqueue_url = queue[\u0026#39;QueueUrl\u0026#39;]\rresponse = sqs_client.delete_message(\rQueueUrl=queue_url,\rReceiptHandle=order_item[\u0026#39;receiptHandle\u0026#39;]\r)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: \u0026#39;successfully handle order!\u0026#39;,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r}\rreturn response Chạy các lệnh dưới đây sam build\rsam deploy --guided Mở bảng điều khiển của AWS Lambda để kiểm tra các function. "
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/3-2-create-api/",
	"title": "Create APIs",
	"tags": [],
	"description": "",
	"content": "We will create APIs to integrate with the functions created in the previous step.\nOpen template.yaml file of source code folder - fcj-book-store-sam-ws6 Add following script under /confirm_user api to create /books/order resource with GET method /books/order:\rget:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrderManagement.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Add following script to create POST method post:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckOutOrder.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_prox Add following script to create DELETE method delete:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteOrder.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Add following script to create /books/order/handle resource with POST method /books/order/handle:\rpost:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleOrder.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Add event source for Lambda functions to integrate with APIs Add following script under the CheckOutOrder function Events:\rConfirmUser:\rType: Api\rProperties:\rPath: /books/order\rMethod: post\rRestApiId:\rRef: BookApi Add following script under the OrderManagement function Events:\rConfirmUser:\rType: Api\rProperties:\rPath: /books/order\rMethod: get\rRestApiId:\rRef: BookApi Add following script under the HandleOrder function Events:\rProcessOrder:\rType: Api\rProperties:\rPath: /books/order/handle\rMethod: post\rRestApiId:\rRef: BookApi Add following script under the DeleteOrder function Events:\rDeleteOrder:\rType: Api\rProperties:\rPath: /books/order\rMethod: delete\rRestApiId: Ref: BookApi Run the below commands sam build\rsam deploy --guided Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;CheckOurOrder may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;OrderManagement may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;HandleOrder may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;DeleteOrder may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; So we have completed the setup steps. The next part we will check the website operation\n"
},
{
	"uri": "//localhost:1313/2-create-sqs-and-sns/",
	"title": "Create queue and SNS topic",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a queue with Amazon SQS and an SNS topic with Amazon SNS:\nCreate SQS Create SNS topic "
},
{
	"uri": "//localhost:1313/2-create-sqs-and-sns/2-2-create-sns/",
	"title": "Create SNS topic",
	"tags": [],
	"description": "",
	"content": " Navigate Amazon SNS console Click Topics on the left menu Click Create topic Select Stardard for the topic type Ente topic name: order-notic Scroll down to bottom, click Create topic Click on the topic you just created Click Create subscription Select Protocol is Email Enter the email with which you registered an account on Cognito and are admin Click Create subcription Then, status of subcription is pending confirmation To confirm your email, open the registered email Search mail sent from no-reply@sns.amazonaws.com, click to confrimation link Back to SNS topic dashboard, subscription confirmed "
},
{
	"uri": "//localhost:1313/3-create-api-lambda-function/",
	"title": "Create API and Lambda function",
	"tags": [],
	"description": "",
	"content": "After creating the queue and SQS topic, we will create the APIs and Lambda functions to interact with the queue and SQS topic:\nCreate Lambda function Create APIs "
},
{
	"uri": "//localhost:1313/4-test-operation/",
	"title": "Test web operation",
	"tags": [],
	"description": "",
	"content": "You can download the image files here to add data to check the operation of the services\nImages\rJava.jpg\r(23 ko)\rLetGoBook.png\r(292 ko)\rOpen config.js file in source code folder of front-end Uncomment the line 4, then change value with email that you registered account as well as registered to receive notify Open Login.js file in source/component/Authen/ folder Uncomment the lines 39 and 41 Run the below command to build and upload to S3 bucket yarn build\raws s3 cp build s3://fcj-book-store --recursive Navigate Amazon S3 console Click to fcj-book-store bucket Click Properties tab Scroll down to bottom, click to website endpoint Click Login Nhập thông tin tài khoản bạn đã đăng ký: email và mật khẩu Click Submit Click Create new book Enter the book information Enter ID: 1 Enter book name: Java Enter author: Jame Patternson Enter catagory IT Enter price: 10.98 Enter desciption: A beginner's guide to learning the basic of Java Click Choose File và chọn tệp ảnh Java.jpg mà bạn vừa tải về Click Create Ấn OK Ấn Create new book Enter ID: 2 Enter book name: Let's Go Enter author: Alex Edwards Enter catagory: IT Enter price: 15.8 Enter desciption: A step-by-step guide to creating fast, secure web with Go Click Choose File và chọn tệp ảnh LetGoBook.png mà bạn vừa tải về Click Create Click OK Click Add to cart of each product Click on the cart icon in the upper right corner Click Checkout Click OK Back to Amazon SQS console Click Send and receive messages Click Poll messages Click to the showing message View the content of the order, Click Done Open email that you have subscribed to receive notification Back to the application tab Click Orders, orders are displayed Repeat steps 12 to 14 to add as some orders as you like Click Orders Click Handle Click OK The order has been processed, the status is changed to Processed and delete and processing buttons aren\u0026rsquo;t displayed Click Delete Open Amazon DynamoDB console, Click Explore items on the left menu Select Orders, processed order data has been entered into the table Back to application tab Click Delete Click OK Deleted orders are no longer displayed We have completed the workshop, already know how to work with Amazon SQS and Amazon SNS. The next workshop we will use CodePipeline to deploy the application.\n"
},
{
	"uri": "//localhost:1313/5-cleanup/",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": " Empty S3 bucket Open AWS S3 console Select fcj-book-store Click Empty Enter permanently delete Click Empty Do the same for bucket starting with aws-sam-cli-managed-default- Delete CloudFormation stacks Execute the below command to delete the AWS SAM application sam delete --stack-name fcj-book-store\rsam delete --stack-name aws-sam-cli-managed-default Delete queue Open Amazon SQS console Select created queue Click Delete Enter delete Click Delete Delete SNS topic and subcription Open Amazon SNS console Select created topic Click Delete Enter delete me Click Delete Click Subcriptions tab Select created subcription Click Delete Click Delete again "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]