[
{
	"uri": "//localhost:1313/vi/1-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trước khi thực hiện nội dung chính của workshop này, chúng ta cần thiết lập lại ứng dụng web bằng AWS SAM.\nTải source code dưới đây Source code\rfcj-book-store-sam-ws6.zip\r(8269 ko)\rChạy các câu lệnh dưới đây sam build\rsam deploy --guided Nhập nội dung như sau: Stack Name []: fcj-book-store AWS Region []: ap-southeast-1 Confirm changes before deploy [Y/n]: y Allow SAM CLI IAM role creation [Y/n]: y Disable rollback [y/N]: n BooksList may not have authorization defined, Is this okay? [y/N]: y BookCreate may not have authorization defined, Is this okay? [y/N]: y BookDelete may not have authorization defined, Is this okay? [y/N]: y Login may not have authorization defined, Is this okay? [y/N]: y Register may not have authorization defined, Is this okay? [y/N]: y ConfirmUser may not have authorization defined, Is this okay? [y/N]: y Save arguments to configuration file [Y/n]: y Mở bảng điều khiển của AWS APIs Gateway\nẤn chọn API Gateway REST API to Lambda\nẤn chọn Stage ở menu phía bên trái Ấn chọn staging Ghi lại InvokeURL Thực hiện câu lệnh dưới đây để tải code FCJ-Serverless-Workshop về máy của bạn git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git Mở tệp config.js, thay giá trị của APP_API_URL bằng InvokeURL Thực hiện các câu lệnh dưới đây để build project cd FCJ-Serverless-Workshop\ryarn build Chúng ta đã build xong front-end. Tiếp theo thực hiện câu lệnh sau để tải thư mục build lên S3 bucket aws s3 cp build s3://fcj-book-store --recursive Vậy là chúng ta đã tạo lại xong ứng dụng web.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Serverless - Xử lý đơn hàng với SQS-SNS",
	"tags": [],
	"description": "",
	"content": "Serverless - Xử lý đơn hàng với SQS-SNS Tổng quan Trong bài số 6 của series này, chúng ta sẽ xử lý các đơn đặt hàng của người dùng sử dụng Amazon SQS và SNS. Khi người dùng đặt hàng, đơn hàng sẽ được đẩy vào hàng đợi và SNS sẽ thông báo cho admin về đơn hàng mới đó. Admin có quyền xem tất cả các đơn đặt hàng và xử lý hoặc xoá chúng.\nKiến trúc của ứng dụng web sẽ như sau: Khi người dùng đặt hàng (ấn Checkout), API POST /books/order đưa thông tin của đơn hàng vào hàng đợi mà bạn tạo, sau đó pulish một tin nhắn qua Amazon SNS topic API GET /books/order được gọi khi admin sử dụng tính năng quản lý đơn hàng để lấy toàn bộ đơn hàng chưa xử lý trong hàng đợi và đã xử lý trong bảng của DynamoDB Khi Admin xử lý đơn hàng (ấn Handle), API POST /books/order/handle sẽ đẩy đơn hàng vào DynamoDB và xoá nó trong hàng đợi Khi Admin xoá đơn hàng (ấn Delete), API DELETE /books/order sẽ xoá đơn hàng khỏi hàng đợi Amazon Simple Queue Service Amazon Simple Queue Service cung cấp một hàng đợi an toàn, bền vững và có sẵn cho phép bạn tích hợp và tách rời các hệ thống và thành phần phần mềm phân tán. Nó có thể mở rộng quy mô độc lập với ứng dụng của chúng ta. Nó cung cấp một API dịch vụ web chung mà bạn có thể truy cập bằng bất kỳ ngôn ngữ lập trình nào mà AWS SDK hỗ trợ. Amazon SQS hỗ trợ cả hàng đợi tiêu chuẩn và FIFO.\nMột hệ thống message phân tán gồm 3 phần chính: các thành phần của hệ thống phân tán, hàng đợi của bạn (được phân phối trên máy chủ Amazon SQS) và các tin nhắn trong hàng đợi. Ví dụ: hệ thống của bạn có một số nhà sản xuất (thành phần gửi thông điệp đến hàng đợi) và người tiêu dùng (thành phần nhận thông báo từ hàng đợi). Hàng đợi (chứa các thông báo) lưu trữ các thông báo trên máy chủ Amazon SQS.\nAmazon Simple Notification Service Amazon Simple Notification Service (SNS) một dịch vụ được quản lý để cung cấp dịch vụ gửi tin nhắn từ publishers đến subscribers (còn được gọi là producers và consumers). Publishers giao tiếp không đồng bộ với subscribers bằng cách gửi tin nhắn đến một topic, đây là điểm truy cập và kênh giao tiếp logic. Khách hàng có thể đăng ký SNS topic và nhận các tin nhắn đã xuất bản bằng cách sử dụng loại điểm cuối được hỗ trợ, chẳng hạn như Amazon Kinesis Data Firehose, Amazon SQS, AWS Lambda, HTTP, email, thông báo đẩy trên thiết bị di động và tin nhắn văn bản di động (SMS).\nNội dung Chuẩn bị Tạo hàng đợi và SNS topic Tạo API và Lambda function Kiểm tra hoạt động Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/2-create-sqs-and-sns/2-1-create-sqs/",
	"title": "Tạo hàng đợi",
	"tags": [],
	"description": "",
	"content": " Mở bảng điều khiển của Amazon SQS Ấn Create queue Chọn Stardard cho kiểu của hàng đợi Nhập tên cho hàng đợi: checkout-queue Kéo xuống cuối, ấn Create queue Ấn Send and receive messages Nhập nội dung message, ví dụ: The first order Ấn Send để gửi message đến hàng đợi Ấn Poll message để nhận toàn bộ message gửi đến hàng đợi Ấn vào message đang hiện thị Nội dung message được hiện thị Ấn Done Tích chọn message Ấn Delete để xoá message Ấn Delete "
},
{
	"uri": "//localhost:1313/vi/3-create-api-lambda-function/3-1-create-lambda-function/",
	"title": "Tạo Lambda function",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a new DynamoDB table to store processed order data and four Lambda functions to store orders, manage orders, delete orders, and process orders with SAM template\nOpen template.yaml file in source code folder - fcj-book-store-sam-ws6 Add the below script to create Orders table in DynamoDB OrdersTable:\rType: AWS::Serverless::SimpleTable\rProperties:\rTableName: Orders\rPrimaryKey:\rName: id\rType: String Run the below commands sam build\rsam deploy --guided Open AWS DynamDB console to check Add the below script to create CheckOutOrder function CheckOutOrder:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: checkout_order\rCodeUri: fcj-book-store/checkout_order\rHandler: checkout_order.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- sqs:*\rResource:\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\r- Sid: VisualEditor1\rEffect: Allow\rAction:\r- sns:Publish\rResource:\r- !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:order-notice\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Add the below script to create OrderManagement function OrderManagement:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: order_management\rCodeUri: fcj-book-store/order_management\rHandler: order_management.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- sqs:*\rResource:\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\r- Sid: VisualEditor1\rEffect: Allow\rAction:\r- dynamodb:Query\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Orders\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Add the below script to create HandleOrder function HandleOrder:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: handle_order\rCodeUri: fcj-book-store/handle_order\rHandler: handle_order.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- dynamodb:PutItem\r- dynamodb:BatchWriteItem\r- sqs:*\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Orders\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Add the below script to create DeleteOrder function DeleteOrder:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: delete_order\rCodeUri: fcj-book-store/delete_order\rHandler: delete_order.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- sqs:*\r- dynamodb:DeleteItem\rResource:\r- !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:checkout-queue\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Orders\rEnvironment:\rVariables:\rQUEUE_NAME: \u0026#34;checkout-queue\u0026#34; Add directories and source code files for functions. The directory structure is as follows: fcj-book-store-sam-ws6\r├── fcj-book-store\r│ ├── checkout_order\r│ │ └── checkout_order.py\r│ ├── order_management\r│ │ └── order_management.py\r│ ├── handle_order\r│ │ └── handle_order.py\r│ ├── delete_order\r│ │ └── delete_order.py\r│ ├── ....\r└── template.yaml Create checkout_order folder in fcj-book-store-sam-ws6/fcj-book-store folder Create checkout_order.py file and copy the below code to it import json\rimport boto3\rimport os\rdef lambda_handler(event, context):\rclient = boto3.client(\u0026#34;sqs\u0026#34;)\rsns = boto3.client(\u0026#39;sns\u0026#39;)\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rstatus = 200\rtry:\rresponse = client.get_queue_url(\rQueueName=queue_name\r)\rsend_response = client.send_message(\rQueueUrl=response[\u0026#39;QueueUrl\u0026#39;], MessageBody=event[\u0026#34;body\u0026#34;]\r)\rexcept Exception as e:\rstatus = 400\rtry:\rresponse1 = sns.publish(\rTopicArn=os.environ[\u0026#39;SNS_ARN\u0026#39;], Message=\u0026#34;There is a new order. Please check it!\u0026#34;, )\rexcept Exception as e:\rstatus = 400\rprint(e)\rreturn {\r\u0026#39;statusCode\u0026#39;: status,\r\u0026#39;body\u0026#39;: json.dumps(response[\u0026#34;ResponseMetadata\u0026#34;]),\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r}\r} Create order_management folder in fcj-book-store-sam-ws6/fcj-book-store folder Create order_management.py file and copy the below code to it import boto3\rimport json\rimport os\rfrom boto3.dynamodb.types import TypeDeserializer\r# Create SQS client\rsqs_client = boto3.client(\u0026#39;sqs\u0026#39;)\r# Create DynamoDB client\rdynamodb_client = boto3.client(\u0026#39;dynamodb\u0026#39;)\rserializer = TypeDeserializer()\rdef deserialize(data):\rif isinstance(data, list):\rreturn [deserialize(v) for v in data]\rif isinstance(data, dict):\rtry:\rreturn serializer.deserialize(data)\rexcept TypeError:\rreturn {k: deserialize(v) for k, v in data.items()}\relse:\rreturn data\rdef format_db_data(messages, db_data):\rif \u0026#39;Items\u0026#39; in db_data:\rformat_data = deserialize(db_data[\u0026#34;Items\u0026#34;])\rprice = 0\rfor book_item in format_data:\rprice = book_item[\u0026#39;price\u0026#39;]\rdel book_item[\u0026#39;price\u0026#39;]\rdel book_item[\u0026#39;id\u0026#39;]\rmessages.append({\r\u0026#34;receiptHandle\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;books\u0026#34;: format_data,\r\u0026#34;price\u0026#34;: price,\r\u0026#34;status\u0026#34;: \u0026#34;Processed\u0026#34;\r})\rdef get_order_from_dynamodb(messages):\rdata = []\ri = 1\rwhile True:\rid = str(i)\rdata = dynamodb_client.query(\rTableName=\u0026#34;Orders\u0026#34;, KeyConditionExpression=\u0026#34;id = :id\u0026#34;, ExpressionAttributeValues={\u0026#34;:id\u0026#34;: {\u0026#34;S\u0026#34;: id}})\rif not data[\u0026#34;Items\u0026#34;]:\rbreak\rformat_db_data(messages, data)\ri += 1\rdef get_order_from_sqs(messages):\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rqueue = sqs_client.get_queue_url(QueueName=queue_name)\rqueue_url = queue[\u0026#39;QueueUrl\u0026#39;]\rresponse = sqs_client.get_queue_attributes(\rQueueUrl=queue_url,\rAttributeNames=[\u0026#39;ApproximateNumberOfMessages\u0026#39;]\r)\rnumber_of_message = int(\rresponse[\u0026#39;Attributes\u0026#39;][\u0026#39;ApproximateNumberOfMessages\u0026#39;])\rprint(number_of_message)\ri = 0\rwhile i \u0026lt; number_of_message:\rmsg_list = sqs_client.receive_message(\rQueueUrl=queue_url,\rMaxNumberOfMessages=10,\rWaitTimeSeconds=20,\rVisibilityTimeout=3\r)\rif \u0026#39;Messages\u0026#39; in msg_list:\rfor m in msg_list[\u0026#39;Messages\u0026#39;]:\rprint(json.loads(m[\u0026#34;Body\u0026#34;]))\rmessages.append({\r\u0026#34;receiptHandle\u0026#34;: m[\u0026#34;ReceiptHandle\u0026#34;],\r\u0026#34;books\u0026#34;: json.loads(m[\u0026#34;Body\u0026#34;])[\u0026#39;books\u0026#39;],\r\u0026#34;price\u0026#34;: json.loads(m[\u0026#34;Body\u0026#34;])[\u0026#39;price\u0026#39;],\r\u0026#34;status\u0026#34;: \u0026#34;Unprocessed\u0026#34;\r})\ri += 1\rdef lambda_handler(event, context):\rmessages = []\rget_order_from_dynamodb(messages)\rget_order_from_sqs(messages)\rprint(messages)\rreturn{\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: json.dumps(messages),\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\r} Create handle_order folder in fcj-book-store-sam-ws6/fcj-book-store folder Create handle_order.py file and copy the below code to it import boto3\rimport json\rimport os\rdynamodb_client = boto3.resource(\u0026#39;dynamodb\u0026#39;)\rtable = dynamodb_client.Table(\u0026#39;Orders\u0026#39;)\rsqs_client = boto3.client(\u0026#39;sqs\u0026#39;)\rdef lambda_handler(event, context):\rorder_item = json.loads(event[\u0026#34;body\u0026#34;])\rproducts_infor = order_item[\u0026#39;books\u0026#39;]\rprint(order_item)\rfor book_item in products_infor:\rprint(book_item)\rdata = {\r\u0026#34;id\u0026#34;: str(order_item[\u0026#39;id\u0026#39;]),\r\u0026#34;book_id\u0026#34;: book_item[\u0026#39;id\u0026#39;],\r\u0026#34;name\u0026#34;: book_item[\u0026#39;name\u0026#39;],\r\u0026#34;qty\u0026#34;: str(book_item[\u0026#39;qty\u0026#39;]),\r\u0026#34;price\u0026#34;: str(order_item[\u0026#39;price\u0026#39;])\r}\rprint(data)\rtable.put_item(Item=data)\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rqueue = sqs_client.get_queue_url(QueueName=queue_name)\rqueue_url = queue[\u0026#39;QueueUrl\u0026#39;]\rresponse = sqs_client.delete_message(\rQueueUrl=queue_url,\rReceiptHandle=order_item[\u0026#39;receiptHandle\u0026#39;]\r)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: \u0026#39;successfully handle order!\u0026#39;,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r}\rreturn response Create delete_order folder in fcj-book-store-sam-ws6/fcj-book-store folder Create delete_order.py file and copy the below code to it import boto3\rimport json\rimport os\rdynamodb_client = boto3.client(\u0026#39;dynamodb\u0026#39;)\rsqs_client = boto3.client(\u0026#39;sqs\u0026#39;)\rdef lambda_handler(event, context):\rorder_item = json.loads(event[\u0026#34;body\u0026#34;])\rif order_item[\u0026#39;receiptHandle\u0026#39;]:\rqueue_name = os.getenv(\u0026#34;QUEUE_NAME\u0026#34;)\rqueue = sqs_client.get_queue_url(QueueName=queue_name)\rqueue_url = queue[\u0026#39;QueueUrl\u0026#39;]\rresponse = sqs_client.delete_message(\rQueueUrl=queue_url,\rReceiptHandle=order_item[\u0026#39;receiptHandle\u0026#39;]\r)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: \u0026#39;successfully handle order!\u0026#39;,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r}\rreturn response Run the below commands sam build\rsam deploy --guided Open AWS Lambda console to check functions "
},
{
	"uri": "//localhost:1313/vi/3-create-api-lambda-function/3-2-create-api/",
	"title": "Tạo các API",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tạo các API để tích hợp với các function đã tạo ở bước trước.\nMở tệp template.yaml của thư mục source code fcj-book-store-sam-ws6 Thêm đoạn script sau vào dưới api /confirm_user để tạo resource /books/order với method GET /books/order:\rget:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrderManagement.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Thêm đoạn script sau để tạo method POST post:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckOutOrder.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_prox Thêm đoạn script sau để tạo method DELETE delete:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteOrder.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Thêm đoạn script sau để tạo resource /books/order/handle với method POST /books/order/handle:\rpost:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleOrder.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Thêm event source cho các Lambda function để tích hợp với các APIs Thêm đoạn script sau vào phía dưới của function CheckOutOrder Events:\rConfirmUser:\rType: Api\rProperties:\rPath: /books/order\rMethod: post\rRestApiId:\rRef: BookApi Thêm đoạn script sau vào phía dưới của function OrderManagement Events:\rConfirmUser:\rType: Api\rProperties:\rPath: /books/order\rMethod: get\rRestApiId:\rRef: BookApi Thêm đoạn script sau vào phía dưới của function HandleOrder Events:\rProcessOrder:\rType: Api\rProperties:\rPath: /books/order/handle\rMethod: post\rRestApiId:\rRef: BookApi Thêm đoạn script sau vào phía dưới của function DeleteOrder Events:\rDeleteOrder:\rType: Api\rProperties:\rPath: /books/order\rMethod: delete\rRestApiId: Ref: BookApi Chạy các câu lệnh dưới đây: sam build\rsam deploy --guided Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;CheckOurOrder may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;OrderManagement may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;HandleOrder may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;DeleteOrder may not have authorization defined, Is this okay? [y/N]:\u0026rdquo; Vậy là chúng ta đã hoàn thành các bước thiết lập. Phần tiếp theo chúng ta sẽ kiểm tra hoạt động của trang web\n"
},
{
	"uri": "//localhost:1313/vi/2-create-sqs-and-sns/",
	"title": "Tạo hàng đợi và SNS topic",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo một hàng đợi với Amazon SQS và một SNS topic với Amazon SNS:\nTạo hàng đợi Tạo SNS topic "
},
{
	"uri": "//localhost:1313/vi/2-create-sqs-and-sns/2-2-create-sns/",
	"title": "Tạo SNS topic",
	"tags": [],
	"description": "",
	"content": " Mở bảng điều khiển của Amazon SNS Ấn Topics ở menu phía bên trái Ấn Create topic Chọn Stardard cho kiểu của topic Nhập tên topic: order-notic Kéo xuống cuối trang, ấn Create topic Ấn vào topic mà bạn vừa tạo Ấn Create subscription Chọn Protocol là Email Nhập email mà bạn đã đăng ký tài khoản trên Cognito và là admin Ấn Create subcription Sau đó, subcription sẽ ở trạng thái đang xử lý Để xác nhận email của bạn, mở email đã đăng ký Tìm mail được gửi đến từ địa no-reply@sns.amazonaws.com, ấn vào link để xác nhận Quay lại với sns topic, subcription đã được xác nhận "
},
{
	"uri": "//localhost:1313/vi/3-create-api-lambda-function/",
	"title": "Tạo API và Lambda function",
	"tags": [],
	"description": "",
	"content": "Sau khi tạo xong hàng đợi và SQS topic, chúng ta sẽ tạo các API và Lambda function để tương tác với hàng đợi và SQS topic:\nTạo Lambda function Tạo các API "
},
{
	"uri": "//localhost:1313/vi/4-test-operation/",
	"title": "Kiểm tra hoạt động",
	"tags": [],
	"description": "",
	"content": "Bạn có thể tải tệp ảnh ở đây để thêm dữ liệu để kiểm tra hoạt động của các dịch vụ\nImages\rJava.jpg\r(23 ko)\rLetGoBook.png\r(292 ko)\rMở tệp config.js trong thư mục source code của front-end Bỏ comment dòng số 4, sau đó thay giá trị băng email mà bạn đã đăng ký tài khoản cũng là email là bạn đăng ký nhận thông báo Mở tệp Login.js trong thư mục source/component/Authen/ Bỏ comment dòng số 39 và 41 Chạy các lệnh dưới đây để build và tải lên S3 bucket yarn build\raws s3 cp build s3://fcj-book-store --recursive Mở bảng điều khiển của Amazon S3 Ấn vào bucket fcj-book-store Ấn chọn tab Properties Kéo xuống cuối trang, ấn vào endpoint của website Ấn Login Nhập thông tin tài khoản bạn đã đăng ký: email và mật khẩu Ấn Submit Ấn Create new book Nhập thông tin sách Nhập ID: 1 Nhập tên sách: Java Nhập tác giả: Jame Patternson Nhập thể loại: IT Nhập giá: 10.98 Nhập mô tả: A beginner's guide to learning the basic of Java Ấn Choose File và chọn tệp ảnh Java.jpg mà bạn vừa tải về Ấn Create Ấn OK Ấn Create new book Nhập ID: 2 Nhập tên sách: Let's Go Nhập tác giả: Alex Edwards Nhập thể loại: IT Nhập giá: 15.8 Nhập mô tả: A step-by-step guide to creating fast, secure web with Go Ấn Choose File và chọn tệp ảnh LetGoBook.png mà bạn vừa tải về Ấn Create Ấn OK Ấn Add to cart lần lượt từng sản phẩm Ấn vào biểu tượng cart ở góc trên bên phải. Ấn Checkout Ấn OK Quay lại với bảng điều khiển của Amazon SQS Ấn Send and receive messages Ấn Poll messages Ấn vào message đang hiện thị Xem nội dung của đơn hàng, ấn Done Mở email mà bạn đã đăng ký nhận thông báo Quay trở lại với màn hình của ứng dụng Ấn Orders, các đơn hàng được hiện thị Lặp lại bước 12 đến bước 14 để thêm một vài đơn hàng tuỳ ý bạn Ấn Orders Ấn Handle Ấn OK Đơn hàng đã được xử lý chuyển trạng thái sang thành Processed và không hiện các nút xoá và xử lý Ấn Delete Mở bảng điều khiển của Amazon DynamoDB, ấn Explore items ở menu phía bên trái Chọn Orders, dữ liệu đơn hàng đã được đưa vào bảng Quay trở lại với màn hình của ứng dụng Ấn Delete Ấn OK Đơn hàng bị xoá không còn hiện thị Chúng ta đã hoàn thành workshop, đã biết cách làm việc với Amazon SQS và Amazon SNS. Bài tiếp theo chúng ta sẽ sử dụng CodePipeline để triển khai ứng dụng.\n"
},
{
	"uri": "//localhost:1313/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Làm rỗng S3 bucket Mở bảng điều khiển của AWS S3 Chọn fcj-book-store Ấn Empty Nhập permanently delete Ấn Empty Làm tương tự với bucket bắt đầu bằng aws-sam-cli-managed-default- và bucket book-image-resize-store Xoá stack của CloudFormation Chạy câu lệnh dưới đây để xoá ứng dụng AWS SAM sam delete --stack-name fcj-book-store\rsam delete --stack-name aws-sam-cli-managed-default Xoá hàng đợi Mở bảng điều khiển của Amazon SQS Chọn hàng đợi đã tạo Ấn Delete Nhập delete Ấn Delete Xoá SNS topic Mở bảng điều khiển của Amazon SNS Chọn topic đã tạo Ấn Delete Nhập delete me Ấn Delete Ấn vào tab Subcriptions Chọn subcription đã tạo Ấn Delete Ấn Delete lần nữa "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]