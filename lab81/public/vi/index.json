[
{
	"uri": "//localhost:1313/vi/1-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trước khi thực hiện nội dung chính của workshop này, chúng ta cần thiết lập lại ứng dụng web.\nTải source code dưới đây Source code\rfcj-book-store-sam-ws3.zip\r(8266 ko)\rChạy các câu lệnh dưới đây sam build\rsam deploy --guided Nhập nội dung như sau: Stack Name []: fcj-book-store AWS Region []: ap-southeast-1 Confirm changes before deploy [Y/n]: y Allow SAM CLI IAM role creation [Y/n]: y Disable rollback [y/N]: n BooksList may not have authorization defined, Is this okay? [y/N]: y BookCreate may not have authorization defined, Is this okay? [y/N]: y BookDelete may not have authorization defined, Is this okay? [y/N]: y Save arguments to configuration file [Y/n]: y Tải code FCJ-Serverless-Workshop về máy của bạn Mở terminal trên máy bạn tại thư mục bạn muốn lưu source code Sao chép câu lệnh dưới đây git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git\rcd FCJ-Serverless-Workshop\ryarn build Chúng ta đã build xong front-end. Tiếp theo thực hiện câu lệnh sau để tải thư mục build lên S3 aws s3 cp build s3://fcj-book-store --recursive Vậy là chúng ta đã tạo lại xong ứng dụng web.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Serverless - Xác thực với Amazon Cognito",
	"tags": [],
	"description": "",
	"content": "Serverless - Xác thực với Amazon Cognito Tổng quan Chúng ta đã đi qua 3 bài và xây dựng một ứng dụng web đơn giản với mô hình serverless trên cloud. Để ứng dụng web của chúng ta xác thực, các chức năng chỉ được sử dụng khi người dùng đã đăng nhập. Do đó bài này chúng ta sẽ tìm hiểu về AWS Cognito - cung cấp xác thực, ủy quyền và quản lý người dùng cho ứng dụng web và di động.\nKiến trúc của ứng dụng web sẽ như sau: AWS Cognito AWS Cognito cho phép chúng ta trong việc xây dựng luồng sign-in, sign-up, verify email, thay đổi password, đặt lại password,\u0026hellip; một cách dễ dàng hơn, thay vì ta phải tự xây dựng DB cho user và tự làm nhiều thứ như JWT, hash password, send mail verify,\u0026hellip; Điều này giúp bạn tập chung vào phát triển tính năng khác của ứng dụng. Người dùng có thể đăng nhập trực tiếp bằng tên người dùng và mật khẩu hoặc thông qua bên thứ ba như Facebook, Amazon, Google hoặc Apple.\nHai thành phần chính của Amazon Cognito là User pools and Identity pools:\nUser pools: các thư mục người dùng cung cấp tùy chọn đăng ký và đăng nhập cho người dùng ứng dụng web và thiết bị di động của bạn. Sau khi đăng nhập với user pool, người dùng ứng dụng có thể truy cập các tài nguyên mà ứng dụng cho phép Identity pools: cung cấp thông tin xác thực AWS để cấp cho người dùng của bạn quyền truy cập vào các dịch vụ AWS khác. Ví dụ sử dụng user pool và identity pool cùng nhau\nTrong bước đầu tiên, người dùng ứng dụng của bạn đăng nhập thông qua user pool và nhận mã thông báo user pool sdùng sau khi xác thực thành công. Tiếp theo, ứng dụng của bạn trao đổi mã thông báo user pool dùng lấy thông tin đăng nhập AWS thông qua nhóm nhận dạng. Cuối cùng, người dùng ứng dụng của bạn sau đó có thể sử dụng các thông tin đăng nhập AWS đó để truy cập các dịch vụ AWS khác như Amazon S3 hoặc DynamoDB. Nội dung Chuẩn bị Tạo User Pool Tạo API và Lambda function Kiểm tra với front-end Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/2-create-user-pool/",
	"title": "Tạo User Pool",
	"tags": [],
	"description": "",
	"content": " Mở bảng điều khiển của Amazon Cognito Chọn User pools ở phía menu phía bên trái Ấn Create user pool Chọn Email Ấn Next Chọn Custom cho mục Password policy để chỉnh password theo ý bạn muốn Bỏ chọn Contain at least 1 special character Để 30 ngày hết hạn Kéo xuống, chọn No MFA cho mục Multi-factor authentication Chọn Email only cho mục Delivery method Ấn Next Để mặc định các tuỳ chọn Kéo xuống dưới, ấn Next Chọn Send email with Cognito Ấn Next Nhập tên cho user pool, ví dụ: cognito-fcj-book-store Chọn Public client Nhập tên cho app client, ví dụ: fcj-book-store Mở rộng phần Advanced app client settings Chọn ALLOW_USER_PASSWORD_AUTH Kéo xuống cuối trang và ấn Create user pool Ấn vào user pool vừa tạo Ấn chọn App intergation Kéo xuống cuối trang, ghi lại Client ID "
},
{
	"uri": "//localhost:1313/vi/3-create-api-and-lambda-function/",
	"title": "Tạo API và Lambda function",
	"tags": [],
	"description": "",
	"content": "Sau khi tạo xong User pool, chúng ta tạo API và Lambda function để xử lý yêu cầu đăng ký và đăng nhập của người dùng.\nMở tệp template.yaml trong source của tệp fcj-book-store-sam-ws3.zip bạn đã tải ở phần chuẩn bị Thêm đoạn script sau dưới LambdaInvokePermission Thay tất cả APP_INTERGATION bằng CLIENT_ID đã ghi lại từ bước trước Login:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: login\rCodeUri: fcj-book-store/login\rHandler: login.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rEnvironment:\rVariables:\rCLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34;\rRegister:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: register\rCodeUri: fcj-book-store/register\rHandler: register.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rEnvironment:\rVariables:\rCLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34;\rConfirmUser:\rType: AWS::Serverless::Function\rProperties:\rFunctionName: confirm_user\rCodeUri: fcj-book-store/confirm_user\rHandler: confirm_user.lambda_handler\rRuntime: python3.9\rArchitectures:\r- x86_64\rEnvironment:\rVariables:\rCLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34; Cấu trúc thư mục như sau: fcj-book-store-sam-ws3\r├── fcj-book-store\r│ ├── login\r│ │ └── login.py\r│ ├── register\r│ │ └── register.py\r│ ├── confirm_user\r│ │ └── confirm_user.py\r│ ├── ...\r│\r└── template.yaml Tạo thư mục tên login trong thư mục fcj-book-store-sam-ws3/fcj-book-store/ Tạo tệp login.py và sao chép đoạn code sau vào nó import json\rimport boto3\rimport botocore.exceptions\rimport os\rclient = boto3.client(\u0026#39;cognito-idp\u0026#39;)\rdef initiate_auth(client_id, username, password):\rtry:\rresponse = client.initiate_auth(\rAuthFlow=\u0026#39;USER_PASSWORD_AUTH\u0026#39;,\rClientId=client_id,\rAuthParameters={\r\u0026#34;USERNAME\u0026#34;: username,\r\u0026#34;PASSWORD\u0026#34;: password,\r}\r)\rprint(response)\rexcept Exception as e:\rreturn None, e.__str__()\rreturn response, None\rdef lambda_handler(event, context):\ruser_infor = json.loads(event[\u0026#39;body\u0026#39;])\rerror = \u0026#34;\u0026#34;\rmessage = \u0026#34;\u0026#34;\rclient_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;)\rresp, msg = initiate_auth(client_id, user_infor[\u0026#39;username\u0026#39;], user_infor[\u0026#39;password\u0026#39;])\rprint(resp)\rif msg is not None:\rmessage = \u0026#34;Login fail!\u0026#34;\rstatusCode = 400\relif resp[\u0026#34;AuthenticationResult\u0026#34;]:\rmessage = \u0026#34;Login sccessful!\u0026#34;\rstatusCode = 200\relse:\rmessage = \u0026#34;Login fail!\u0026#34;\rstatusCode = 400\r# TODO implement\rreturn {\r\u0026#39;statusCode\u0026#39;: statusCode,\r\u0026#39;body\u0026#39;: message,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r}\r} Tạo thư mục tên register trong thư mục fcj-book-store-sam-ws3/fcj-book-store/ Tạo tệp register.py và sao chép đoạn code sau vào nó import json\rimport boto3\rimport os\rclient = boto3.client(\u0026#39;cognito-idp\u0026#39;)\rdef lambda_handler(event, context):\ruser_infor = json.loads(event[\u0026#39;body\u0026#39;])\rclient_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;)\rerror = None\rtry:\rresp = client.sign_up(\rClientId=client_id,\rUsername=user_infor[\u0026#39;username\u0026#39;],\rPassword=user_infor[\u0026#39;password\u0026#39;]\r)\rexcept Exception as e:\rerror = e.__str__()\rif error is None:\rmessage = \u0026#34;Register successful!\u0026#34;\rstatusCode = 200\relse:\rmessage = \u0026#34;Register fail!\u0026#34;\rstatusCode = 400\rprint(error)\r# TODO implement\rreturn {\r\u0026#39;statusCode\u0026#39;: statusCode,\r\u0026#39;body\u0026#39;: message,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r} Tạo thư mục tên confirm_user trong thư mục fcj-book-store-sam-ws3/fcj-book-store/ Tạo tệp confirm_user.py và sao chép đoạn code sau vào nó import json\rimport boto3\rimport os\rclient = boto3.client(\u0026#39;cognito-idp\u0026#39;)\rdef lambda_handler(event, context):\ruser_infor = json.loads(event[\u0026#39;body\u0026#39;])\rclient_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;)\ruser_pool_id = os.getenv(\u0026#34;USER_POOL_ID\u0026#34;)\rerror = None\rtry:\rresp = client.confirm_sign_up(\rClientId=client_id,\rUsername=user_infor[\u0026#39;username\u0026#39;],\rConfirmationCode=user_infor[\u0026#39;code\u0026#39;]\r)\rexcept Exception as e:\rerror = e.__str__()\rif error is None:\rmessage = \u0026#34;Confirm successful!\u0026#34;\rstatusCode = 200\relse:\rmessage = \u0026#34;Confirm fail!\u0026#34;\rstatusCode = 400\rprint(error)\r# TODO implement\rreturn {\r\u0026#39;statusCode\u0026#39;: statusCode,\r\u0026#39;body\u0026#39;: message,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r} Chạy các dòng lệnh dưới đây: sam build\rsam deploy --guided Thêm đoạn script sau vào sau method delete của BookApi /login:\rpost:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy\r/register:\rpost:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Register.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy\r/confirm_user:\rpost:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmUser.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Thêm đoạn script sau vào function Login Events:\rLogin:\rType: Api\rProperties:\rPath: /login/\rMethod: post\rRestApiId:\rRef: BookApi Thêm đoạn script sau vào function Register Events:\rRegister:\rType: Api\rProperties:\rPath: /register/\rMethod: post\rRestApiId:\rRef: BookApi Thêm đoạn script sau vào function ConfirmUser Events:\rConfirmUser:\rType: Api\rProperties:\rPath: /confirm_user/\rMethod: post\rRestApiId:\rRef: BookApi Chạy các dòng lệnh dưới đây: sam build\rsam deploy --guided Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;Login may not have authorization defined, Is this okay? [y/N]: \u0026quot; Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;Register may not have authorization defined, Is this okay? [y/N]: \u0026quot; Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;ConfirmUser may not have authorization defined, Is this okay? [y/N]: \u0026quot; Chúng ta đã hoàn thành việc triển khai các API và Lambda function.\n"
},
{
	"uri": "//localhost:1313/vi/4-test-front-end/",
	"title": "Kiểm tra hoạt động",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ thử đăng ký và đăng nhập từ ứng dụng web để kiểm tra hoạt động của API Gateway, Lambda function và User pool\nMở bảng điều khiển của API Gateway Ấn vào API Gateway REST API to Lambda Chọn Stage ở menu phía bên trái Ấn staging Ghi lại InvokeURL Mở tệp config.js trong thư mục source code của ứng dụng - FCJ-Serverless-Workshop Thay APP_API_URL bằng InvokeURL Chạy các dòng lệnh dưới đây: yarn build\raws s3 cp build s3://fcj-book-store --recursive Mở bảng điều khiển Amazon S3 Ấn chọn bucket fcj-book-store Chọn tab Properties Kéo xuống cuối trang, ấn vào endpoint của web Ấn Register góc bên phải Nhập thông tin đăng ký email, mật khẩu và nhập lại mật khẩu Ấn nút Register Đăng ký bằng email mà bạn đang dùng để có thể lấy được code xác thực tài khoản\nBạn sẽ gặp thông báo Register fail Lỗi do API của chúng ta thiếu Access-Control-Allow-Headers trong headers của phản hồi Để giải quyết lỗi này, mở tệp template.yaml trong source của tệp fcj-book-store-sam-ws3.zip Thêm đoạn script sau cho BookApi AllowMethods: \u0026#34;\u0026#39;GET,POST,OPTIONS,DELETE\u0026#39;\u0026#34;\rAllowHeaders: \u0026#34;\u0026#39;content-type\u0026#39;\u0026#34;\rAllowOrigin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; Chạy các câu lệnh sau: sam build\rsam deploy --guided Quay lại màn hình đăng ký và ấn Register\nTrở lại với bảng điều khiển của Amazon Cognito\nTại tab Users, xuất hiên một người dùng nhưng vẫn ở trạng thái Unconfirmed Mở email mà bạn vừa đăng ký tài khoản, lấy mã xác nhận được gửi từ no-reply@verificationemail.com Nhập mã xác nhận vào màn hình xác thực Ấn Submit Trở lại với bảng điều khiển của Amazon Cognito Người dùng đã chuyển sang trạng thái Confirmed Nhập thông tin tài khoản: email, mật khẩu để đăng nhập Ấn Submit Sau khi đăng nhập thành công, các tính năng: Create new book, Management, Order xuất hiện cho phép người dùng sử dụng "
},
{
	"uri": "//localhost:1313/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Làm rỗng S3 bucket Mở bảng điều khiển của AWS S3 Chọn fcj-book-store Ấn Empty Nhập permanently delete Ấn Empty Làm tương tự với bucket bắt đầu bằng aws-sam-cli-managed-default- Xoá stack của CloudFormation Chạy câu lệnh dưới đây để xoá ứng dụng AWS SAM sam delete --stack-name fcj-book-store\rsam delete --stack-name aws-sam-cli-managed-default "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]