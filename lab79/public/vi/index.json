[
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu API Gateway / DynamoDB",
	"tags": [],
	"description": "",
	"content": "Tổng quan Giới thiệu API Gateway Amazon API Gateway là dịch vụ được quản lý hoàn toàn giúp các nhà phát triển dễ dàng tạo, phát hành, duy trì, giám sát và bảo vệ API ở mọi quy mô. API đóng vai trò là \u0026ldquo;cửa trước\u0026rdquo; cho các ứng dụng để truy cập dữ liệu, logic nghiệp vụ hoặc chức năng từ các dịch vụ backend của bạn. Bằng cách sử dụng API Gateway, bạn có thể tạo các API RESTful và API WebSocket để kích hoạt các ứng dụng giao tiếp hai chiều theo thời gian thực. API Gateway hỗ trợ các khối lượng công việc có trong container và serverless, cũng như các ứng dụng web.\nAPI Gateway xử lý tất cả các tác vụ liên quan đến tiếp nhận và xử lý lên đến hàng trăm nghìn lệnh gọi API đồng thời, bao gồm quản lý lưu lượng truy cập, hỗ trợ CORS, xác thực và kiểm soát truy cập, điều tiết, giám sát và quản lý phiên bản API. API Gateway không yêu cầu phí tối thiểu hoặc phí ban đầu. Bạn trả tiền cho các lệnh gọi API bạn nhận được cũng như lượng dữ liệu được truyền đi và, với mô hình định giá theo bậc của API Gateway, bạn có thể giảm chi phí khi thay đổi quy mô sử dụng API.\nLoại API API RESTful Xây dựng các API RESTful được tối ưu hóa cho khối lượng công việc serverless và backend HTTP bằng API HTTP. API HTTP là lựa chọn tốt nhất để xây dựng những API chỉ yêu cầu chức năng proxy API. Nếu API của bạn yêu cầu cả chức năng proxy API lẫn tính năng quản lý API trong cùng một giải pháp thì API Gateway cũng cung cấp cả API REST.\nAPI WEBSOCKET Xây dựng các ứng dụng giao tiếp hai chiều theo thời gian thực, chẳng hạn như ứng dụng trò chuyện và bảng điều khiển truyền phát bằng API WebSocket. API Gateway duy trì kết nối lâu dài để xử lý quá trình truyền tin nhắn giữa dịch vụ backend và máy khách của bạn.\nAPI Gateway hoạt động như thế nào? Giới thiệu DynamoDB Bạn tham khảo thêm về workshop DynamoDB\nDynamoDB cơ bản DynamoDB nâng cao "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-1-write-data-function/",
	"title": "Lambda function ghi dữ liệu",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ cập nhật lại code cho function book_create đã tạo ở bài số 1:\nMở bảng điều khiển của AWS Lambda, nhấn vào *book_create function đã tạo từ bài số 1 Sao chép đoạn code sau vào mục lambda_function.py ``` import boto3 import json import base64 import io import cgi import os\ns3 = boto3.client('s3')\rclient = boto3.resource('dynamodb')\rruntime_region = os.environ['AWS_REGION']\rdef get_data_from_request_body(content_type, body):\rfp = io.BytesIO(base64.b64decode(body)) # decode\renviron = {\u0026quot;REQUEST_METHOD\u0026quot;: \u0026quot;POST\u0026quot;}\rheaders = {\r\u0026quot;content-type\u0026quot;: content_type,\r\u0026quot;content-length\u0026quot;: len(body),\r}\rfs = cgi.FieldStorage(fp=fp, environ=environ, headers=headers) return [fs, None]\rdef lambda_handler(event, context):\rcontent_type = event['headers'].get('Content-Type', '') or event['headers'].get('content-type', '')\rif content_type == 'application/json':\rbook_item = json.loads(event[\u0026quot;body\u0026quot;])\relse:\rbook_data, book_data_error = get_data_from_request_body(\rcontent_type=content_type, body=event[\u0026quot;body\u0026quot;]\r)\rname = book_data['image'].filename\rimage = book_data['image'].value\rs3.put_object(Bucket='book-image-store', Key=name, Body=image)\rimage_path = \u0026quot;https://{}.s3.{}.amazonaws.com/{}\u0026quot;.format(\u0026quot;book-image-resize-store\u0026quot;, runtime_region, name)\rbook_item = {\r\u0026quot;id\u0026quot;: book_data['id'].value,\r\u0026quot;rv_id\u0026quot;: 0,\r\u0026quot;name\u0026quot;: book_data['name'].value,\r\u0026quot;author\u0026quot;: book_data['author'].value,\r\u0026quot;price\u0026quot; : book_data['price'].value,\r\u0026quot;category\u0026quot;: book_data['category'].value,\r\u0026quot;description\u0026quot;: book_data['description'].value,\r\u0026quot;image\u0026quot;: image_path\r}\rtable = client.Table('Books')\rtable.put_item(Item = book_item)\rresponse = {\r'statusCode': 200,\r'body': 'successfully created item!',\r'headers': {\r'Content-Type': 'application/json',\r\u0026quot;Access-Control-Allow-Headers\u0026quot;: \u0026quot;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026quot;,\r\u0026quot;Access-Control-Allow-Origin\u0026quot;: \u0026quot;*\u0026quot;,\r\u0026quot;Access-Control-Allow-Methods\u0026quot;: \u0026quot;GET,PUT,POST,DELETE,OPTIONS\u0026quot;\r},\r}\rreturn response\r```\rSau đó ấn Deploy Code xử lý ảnh mà người dùng muốn tải lên và được lưu trong S3 bucket\nNếu bạn tạo bộ chứa S3 có tên khác với lab, hãy thay chúng tại dòng 35 và 36 trong code\nCấp quyền cho Lambda function có thể ghi tệp vào S3 bucket.\nẤn sang tab Configuration\nChọn mục Permissions ở menu bên trái\nẤn vào role mà function đang thực hiện. Ấn vào policy có sẵn bắt đầu bằng AWSLambdaExecutionRole-\nẤn nút Edit policy\nẤn sang tab JSON và thêm đoạn json sau:\n,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::book-image-store/*\u0026#34;\r} Ấn nút Review policy\nXem lại các thiết lập và ấn Save changes "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Serverless - Hướng dẫn viết Front-end gọi API Gateway",
	"tags": [],
	"description": "",
	"content": "Serverless - Hướng dẫn viết Front-end gọi API Gateway Tổng quan Trong bài lần trước, chúng ta đã biết cách tạo và sử dụng Lambda function tương tác với S3 và DynamoDB. Tiếp theo trong series này, chúng ta dựng một ứng dụng web (front-end) để tương tác với cơ sở dữ liệu thông qua Lambda và API Gateway.\nKiến trúc của ứng dụng chúng ta sẽ xây dựng:\nNội dung Giới thiệu Triển khai front-end Triển khai Lambda function Cấu hình API Gateway Kiểm tra API với Postman Kiểm tra API với front-end Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-1-create-dynamodb-table/",
	"title": "Tạo bảng trong DynamoDB",
	"tags": [],
	"description": "",
	"content": " Mở bảng điều khiển DynamoDB, sau đó nhấn nút Create table Nhập tên cho bảng: Books Nhập parition key: id Nhập sort key: rv_id (review id), kiểu Number Kéo xuống phần Table settings, chọn Customize settings Sau đó, chọn On-demand Ấn nút Create local Index Nhập sort key: name Nhập index-name: name-index Ấn nút Create index Kéo xuống cuối trang, ấn nút Create table Vậy là bạn đã tạo xong bảng Books với Local secondary index là name-index\nĐể thêm dữ liệu cho bảng, bạn có thể tải tệp dưới đây: Data\rdynamoDB.json\r(4 ko)\rMở tệp, sau đó thay toàn bộ \u0026lt;AWS-REGION\u0026gt; bằng vùng mà bạn tạo S3 bucket book-image-resize-shop, ví dụ: ap-southeast-2 Chạy câu lệnh sau tại thư mục mà bạn lưu tệp dynamoDB.json\naws dynamodb batch-write-item --request-items file://dynamoDB.json "
},
{
	"uri": "//localhost:1313/vi/4-config-api-gw/4-1-create-methods/",
	"title": "Tạo các method",
	"tags": [],
	"description": "",
	"content": "Tạo API đọc Ấn nút /books, sau đó chọn Create method Tại mục Method detail\nChọn method GET Chọn Lambda Function cho Integration type Tích vào mục Use Lambda Proxy integration Nhập tên của Lambda function cần tích hợp: books_list Ấn nút Save Click Create method Tạo API ghi Ấn nút /books, sau đó chọn Create method Tại mục Method detail\nChọn method POST Chọn Lambda Function cho Integration type Tích vào mục Use Lambda Proxy integration Nhập tên của Lambda function cần tích hợp: books_list Ấn nút Save Click Create method Tạo API xoá Ấn nút /books, sau đó chọn Create Resource Tại phần Create Resource\nNhập {id} cho mục Resource name Ấn nút Create Resource Nhấn vào /{id}, sau đó chọn Create method Tại mục Method detail\nChọn method DELETE Chọn Lambda Function cho Integration type Tích vào mục Use Lambda Proxy integration Nhập tên của Lambda function cần tích hợp: book_delete Ấn nút Save Nhấn vào Create method Vậy là chúng ta đã tạo xong các API tương tác với Lambda function.\n"
},
{
	"uri": "//localhost:1313/vi/4-config-api-gw/4-2-setting-and-cors/",
	"title": "Cài đặt và kích hoạt CORS",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ thêm cài đặt hỗ trợ binary file và kích hoạt CORS cho API\nChọn API Settings ở menu phía bên trái\nẤn vào *Manage media types Click Add binary media type\nNhập multipart/form-data Ấn nút Save Changes Sau khi cài đặt xong, quay lại Resource ở menu bên trái.\nChọn /books resource Chọn Enable CORS Tại phần Enable CORS\nChọn phương thức GET and POST Click Save Chọn /{id} resource\nChọn Enable CORS Tại mục Enable CORS\nChọn phương thức DELETE Click Save Để front-end có thể sử dụng API, chúng ta cần deploy chúng.\nChọn / resource Nhấn Deploy API Chọn New stage Nhập tên cho stage, ví dụ: staging\nClick Deploy Ghi lại URL để gọi API URL của API đọc và ghi: URL của API xoá: "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-2-list-data-function/",
	"title": "Lambda function đọc dữ liệu",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tạo một Lambda function đọc toàn bộ dữ liệu trong bảng của DynamoDB:\nẤn nút Create function Nhập tên cho function, ví dụ: books_list\nChọn Python 3.9 cho mục Runtime Ấn nút Create function Sao chép đoạn code dưới đây và dán vào mục lambda_function.py.\nimport json\rimport boto3\rfrom decimal import *\rfrom boto3.dynamodb.types import TypeDeserializer\rclient = boto3.client(\u0026#39;dynamodb\u0026#39;) serializer = TypeDeserializer()\rclass DecimalEncoder(json.JSONEncoder):\rdef default(self, obj):\rif isinstance(obj, Decimal):\rreturn str(obj)\rreturn json.JSONEncoder.default(self, obj)\rdef deserialize(data):\rif isinstance(data, list):\rreturn [deserialize(v) for v in data]\rif isinstance(data, dict):\rtry:\rreturn serializer.deserialize(data)\rexcept TypeError:\rreturn {k: deserialize(v) for k, v in data.items()}\relse:\rreturn data\rdef lambda_handler(event, context):\rdata_books = client.scan(\rTableName=\u0026#39;Books\u0026#39;,\rIndexName=\u0026#39;name-index\u0026#39;\r)\rformat_data_books = deserialize(data_books[\u0026#34;Items\u0026#34;])\rfor book in format_data_books:\rdata_comment = client.query(\rTableName=\u0026#34;Books\u0026#34;, KeyConditionExpression=\u0026#34;id = :id AND rv_id \u0026gt; :rv_id\u0026#34;, ExpressionAttributeValues={\r\u0026#34;:id\u0026#34;: {\u0026#34;S\u0026#34;: book[\u0026#39;id\u0026#39;]}, \u0026#34;:rv_id\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;0\u0026#34;}\r}\r)\rformat_data_comment = deserialize(data_comment[\u0026#39;Items\u0026#39;])\rprint(data_comment[\u0026#39;Items\u0026#39;])\rbook[\u0026#34;comments\u0026#34;] = format_data_comment\rprint (format_data_books)\rreturn {\r\u0026#34;statusCode\u0026#34;: 200,\r\u0026#34;headers\u0026#34;: {\r\u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE, OPTIONS\u0026#34;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token,XKey,Authorization\u0026#34;\r},\r\u0026#34;body\u0026#34;: json.dumps(format_data_books, cls=DecimalEncoder)\r} Ấn nút Deploy Tiếp theo, cấp quyền cho function có thể đọc được dữ liệu từ DynamoDB\nẤn sang tab Configuration\nChọn Permissions ở menu phía bên trái\nẤn vào role mà function đang thực hiện Ấn vào policy có sẵn bắt đầu bằng AWSLambdaExecutionRole-\nẤn nút Edit policy Ấn sang tab JSON và thêm đoạn json sau:\n,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;dynamodb:Scan\u0026#34;,\r\u0026#34;dynamodb:Query\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:AWS_REGION:ACCOUNT_ID:table/Books\u0026#34;\r} Thay AWS_REGION bằng vùng mà bạn tạo bảng trong DynamoDB, ví dụ: ap-southeast-2\nThay ACCOUNT_ID bằng id tài khoản của bạn.\nẤn nút Review policy Xem lại các thiết lập và ấn Save changes "
},
{
	"uri": "//localhost:1313/vi/2-front-end-deployment/",
	"title": "Triển khai front-end",
	"tags": [],
	"description": "",
	"content": "Bước đầu trong bài này, chúng ta sẽ host ứng dụng web (front-end) với S3 Static website hosting:\nMở bảng điều khiển Amazon S3, nhấn Create bucket Nhập tên cho bucket, ví dụ: fcj-book-shop\nChọn vùng gần bạn nhất Bỏ chọn chặn cho phép truy cập public\nTích vào mục I acknowledge that the current settings might result in this bucket and the objects within becoming public Nhấn nút Create bucket Ấn vào bucket vừa tạo, nhấn vào tab Properties Kéo xuống cuối trang, ấn Edit của mục Static web hosting Chọn Enable để kích hoạt host web tĩnh trên S3\nChọn Host a static website cho Hosting type Nhập index.html cho mục Index document Ấn nút Save changes\nSau khi kích hoạt thành công, bạn hãy ghi lại đường dẫn của web Sau đó, chúng ta cần thêm proxy cho S3 bucket để có thể truy cập được:\nChọn sang tab Permissions Ấn nút Edit tại mục Bucket policy Sao chép đoạn dưới đây vào mục Policy\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::fcj-book-shop/*\u0026#34;\r}\r]\r} Ấn nút Save changes Tải code fcj-serverless-frontend về máy của bạn\nMở command-line/terminal trên máy bạn tại thư mục bạn muốn lưu source code Sao chép câu lệnh dưới đây git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git\rcd fcj-serverless-frontend\rnpm install\ryarn build Chúng ta đã build xong front-end. Tiếp theo thực hiện câu lệnh sau để tải thư mục build lên S3\naws s3 cp build s3://fcj-book-shop --recursive Nếu bạn tải lên thất bại, hãy cấu hình access key ID, secret access key, aws region và output format với câu lệnh aws configure\nKết quả sau khi tải xong: Dán đường dẫn web mà bạn vừa ghi lại vào trình duyệt web của bạn Ứng dụng của bạn hiện tại chưa có dữ liệu nào được trả về. Để lấy dữ liệu từ DynamoDB, hãy sang phần tiếp theo. "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/",
	"title": "Triển khai Lambda function",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ lần lượt tạo các Lambda function để đọc, ghi và xoá dữ liệu trong DynamoDB. Sau đó cấp các quyền cần thiết cho các function đó.\nNội dung Lambda function ghi dữ liệu Tạo function lấy dữ liệu Tạo function xoá dữ liệu "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-3-delete-data-function/",
	"title": "Lambda function xoá dữ liệu",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tạo một Lambda function xoá toàn bộ item có partition key và sort key được chỉ định trong bảng của DynamoDB. Và xoá cả tệp ảnh trong S3 bucket:\nẤn nút Create function Nhập tên cho function, ví dụ: book_delete\nChọn Python 3.9 cho mục Runtime Ấn nút Create function Sao chép đoạn code dưới đây và dán vào mục lambda_function.py.\nimport boto3\rimport json\rs3 = boto3.client(\u0026#39;s3\u0026#39;)\rclient = boto3.resource(\u0026#39;dynamodb\u0026#39;)\rdef get_image_name(image_path):\rstr_image = image_path.split(\u0026#34;/\u0026#34;)\rfor image_path_item in str_image:\rimage_name = image_path_item\rreturn image_name;\rdef lambda_handler(event, context):\rerror = None\rstatus = 200\rdelete_id = event[\u0026#39;pathParameters\u0026#39;]\rdelete_id[\u0026#39;rv_id\u0026#39;] = 0\rtable = client.Table(\u0026#34;Books\u0026#34;)\rimage_path = \u0026#34;\u0026#34;\rtry:\rdata = table.get_item(Key = delete_id)\rimage_path = data[\u0026#39;Item\u0026#39;][\u0026#39;image\u0026#39;]\rimage_name = get_image_name(image_path)\rexcept Exception as e:\rerror = e\rtry:\rresponse = table.query(\rProjectionExpression=\u0026#34;rv_id\u0026#34;, KeyConditionExpression=\u0026#34;id = :id\u0026#34;, ExpressionAttributeValues={\u0026#34;:id\u0026#34;: delete_id[\u0026#39;id\u0026#39;]})\rfor item in response[\u0026#39;Items\u0026#39;]:\rdelete_id[\u0026#39;rv_id\u0026#39;] = item[\u0026#39;rv_id\u0026#39;]\rprint(delete_id)\rtable.delete_item(Key = delete_id)\rprint(image_name)\rs3.delete_object(Bucket=\u0026#39;book-image-resize-store\u0026#39;, Key=image_name)\rexcept Exception as e:\rerror = e\rif error is None:\rmessage = \u0026#39;successfully deleted item!\u0026#39;\relse:\rmessage = \u0026#39;delete item fail\u0026#39;\rstatus = 400\rreturn {\r\u0026#39;statusCode\u0026#39;: status,\r\u0026#39;body\u0026#39;: message,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\r} Ấn nút Deploy Tiếp theo, cấp quyền cho function có thể đọc được dữ liệu từ DynamoDB và xoá object trong S3 bucket\nẤn sang tab Configuration\nChọn Permissions ở menu phía bên trái\nẤn vào role mà function đang thực hiện Ấn vào policy có sẵn bắt đầu bằng AWSLambdaExecutionRole-\nẤn nút Edit policy Ấn sang tab JSON và thêm đoạn json sau:\n,\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;dynamodb:DeleteItem\u0026#34;,\r\u0026#34;dynamodb:GetItem\u0026#34;,\r\u0026#34;dynamodb:Query\u0026#34;,\r\u0026#34;s3:DeleteObject\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: [\r\u0026#34;arn:aws:dynamodb:AWS_REGION:ACCOUNT_ID:table/Books\u0026#34;,\r\u0026#34;arn:aws:s3:::book-image-resize-store/*\u0026#34;\r]\r} Thay AWS_REGION bằng vùng mà bạn tạo bảng trong DynamoDB, ví dụ: ap-southeast-2\nThay ACCOUNT_ID bằng id tài khoản của bạn.\nẤn nút Review policy Xem lại các thiết lập và ấn Save changes "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/",
	"title": "Triển khai Lambda function",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ ba Lambda function để ghi, đọc và xoá dữ liệu trong DynamoDB với ngôn ngữ Python. Nếu bạn đã thực hiện phần dọn dẹp ở bài 1 của series thì hãy tạo lại Lambda function và S3 bucket theo bài số 1\nNội dung Tạo bảng trong DynamoDB Triển khai Lambda function "
},
{
	"uri": "//localhost:1313/vi/4-config-api-gw/",
	"title": "Thiết lập API Gateway",
	"tags": [],
	"description": "",
	"content": "Tiếp theo, chúng ta sẽ thiết lập API Gateway tương tác với các Lambda function đã tạo ở phần trước:\nMở bảng điều khiển của API Gateway Kéo xuống và ấn nút Build của mục REST API Chọn REST cho Protocol\nChọn New API để tạo một API mới Nhập tên cho REST API, ví dụ: fcj-serverless-api Tại mục API enpoint type: chọn Regional Ấn nút Create API Ấn vào API vừa tạo xong, sau đó chọn Create resource Ấn nút Actions, sau đó chọn Create resource\nNhập tên cho resource, ví dụ: books Sau đó ấn nút Create Resource Vậy là chúng ta đã tạo xong một REST API mới và resource cho nó. Tiếp theo chúng ta sẽ tạo các method tương tác với Lambda function và cái đặt chúng:\nTạo các method Cài đặt và kích hoạt CORS "
},
{
	"uri": "//localhost:1313/vi/5-test-api-by-postman/",
	"title": "Kiểm tra API với Postman",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ kiểm tra hoạt động của các API bằng công cụ Postman\nKiểm tra API đọc Ấn vào dấu + để thêm 1 tab mới Chọn GET method Nhập InvokURL của GET API đã ghi lại từ bước trước Ấn nút Send Kết quả trả về là toàn bộ dữ liệu của bảng Books đã qua xử lý Kiểm tra API ghi Tương tự tạo một tab mới Chọn POST method Nhập InvokURL của POST API đã ghi lại từ bước trước Trong mục Body, chọn raw Sao chép đoạn dưới đây: {\r\u0026#34;id\u0026#34;: \u0026#34;5\u0026#34;,\r\u0026#34;rv_id\u0026#34;: 0,\r\u0026#34;name\u0026#34;: \u0026#34;Amazon Web Services in Action 2nd Edition\u0026#34;,\r\u0026#34;author\u0026#34;: \u0026#34;Andreas Wittig\u0026#34;,\r\u0026#34;price\u0026#34;: \u0026#34;59.99\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;IT\u0026#34;,\r\u0026#34;description\u0026#34;: \u0026#34;Amazon Web Services in Action, Second Edition is a comprehensive introduction to computing, storing, and networking in the AWS cloud. You\u0026#39;ll find clear, relevant coverage of all the essential AWS services you to know, emphasizing best practices for security, high availability and scalability.\u0026#34;,\r\u0026#34;image\u0026#34;: \u0026#34;https://book-image-resize-store.s3.ap-southeast-2.amazonaws.com/aws.jpg\u0026#34;\r} Chuyển sang mục Headers Thêm KEY là Content-Type, VALUE là application/json Ấn nút Send Đợi một chút, xem kết quả trả về Mở bảng Books trong bảng điều khiển của DynamoDB kiểm tra dữ liệu Trước khi gọi API ghi Sau khi gọi API ghi Kiểm tra API xoá Vì Lambda function xoá khi thực hiện sẽ xoá ảnh được tải lên bởi người dùng, nên chúng ta tải thủ công ảnh lên S3 bucket để API có thể chạy đúng.\nMở bảng điều khiển của Amazon S3 Ấn vào bucket book-image-store Ấn nút Upload Ấn nút Add files Tải ảnh sau về máy của bạn và chọn nó để tải lên bucket Image\raws.jpg\r(24 ko)\r6. Ấn nút Upload\nSau khi tải xong, chuyển sang bucket book-image-resize-store kiểm tra. Đây là kết quả chạy của reszie_image Lambda funtion Trở lại với Postman, thêm một tab mới để thực hiện API xoá Chọn DELETE method Nhập InvokeURL của DELETE API đã ghi lại từ bước trước, thay /{id} bằng /5 Ấn nút Send Kiểm tra kết quả trả về: Mở bảng Books trong bảng điều khiển của DynamoDB kiểm tra dữ liệu Mở bucket book-image-resize-store kiểm tra kết quả. Ảnh aws.jpg đã xoá. "
},
{
	"uri": "//localhost:1313/vi/6-test-front-end/",
	"title": "Kiểm tra API với front-end",
	"tags": [],
	"description": "",
	"content": "Sau khi kiểm tra các API hoạt động đúng với Postman, chúng ta sẽ kiểm tra các API được gọi với front-end xây dựng từ bước 2.\nMở tệp config.js trong thư mục fcj-serverless-frontend đã được tải về từ phần 2 Thay giá trị cho APP_API_URL bằng URL của bạn: Mở tệp App.js trong thư mục fcj-serverless-frontend/src/, sửa giá trị của biến isAdmin thành true Chạy các dòng lệnh dưới đây: yarn build\raws s3 cp build s3://fcj-book-store --recursive Dán endpoint của S3 static web vào browser của bạn. Ứng dụng đã hiện thông tin sách, nhưng vẫn chưa có ảnh vì chúng ta chưa tải ảnh lên. Vậy API đọc dữ liệu đã hoạt động đúng.\nKiểm tra API ghi dữ liệu: Ấn sang tab Management Ấn nút Update Sửa bất kỳ thông tin gì bạn muốn trừ id Ấn nút Choose image Đưa ảnh dưới đây tải lên bucket: Image\rDockerInAction.jpeg\r(33 ko)\rẤn nút Update Ấn nút OK Ảnh và thông tin được cập nhật Ấn sang tab Create new book ghi dữ liệu mới vào cơ sở dữ liệu Nhập id bằng 5 Nhập tên: Amazon Web Services in Action Nhập tác giả: Andreas Wittig Nhập thể loại: IT Nhập giá: 59.99 Nhập mô tả: Amazon Web Services in Action, Second Edition is a comprehensive introduction to computing, storing, and networking in the AWS cloud. You\u0026rsquo;ll find clear, relevant coverage of all the essential AWS services you to know, emphasizing best practices for security, high availability and scalability. Image\raws.jpg\r(24 ko)\rẤn nút Choose File để tải ảnh lên Ấn nút Create Ấn nút OK Hiển thị thông tin vừa tạo Kiểm tra API xoá Ấn sang tab Management Ấn nút Update Ấn nút Delete Ấn nút OK để xác nhận xoá Ấn nút OK Xem kết quả sau khi xoá: không còn xuất hiện thông tin sách nữa Chúng ta đã hoàn thành việc xây dựng một ứng dụng web đơn giản theo mô hình serverless. Để xây dựng ứng dụng serverless nhanh hơn, trong phần tiếp theo chúng ta sẽ sử dụng AWS Serverless Application Model (SAM). SAM cung cấp cú pháp để diễn đạt các hàm, API, cơ sở dữ liệu và event source mappings.\n"
},
{
	"uri": "//localhost:1313/vi/7-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Xoá bảng trong DynamoDB Mở bảng điều khiển của DynamoDB Chọn Tables ở menu phía bên trái Chọn bảng Books Ấn Delete Nhập delete và ấn Delete table Xoá S3 bucket Mở bảng điều khiển của S3 Chọn bucket book-image-resize-store Ấn nút Empty Nhập permanently delete và ấn Empty Chọn bucket fcj-book-store Ấn nút Empty Nhập permanently delete và ấn Empty Chọn bucket book-image-resize-store Ấn nút Delete Nhập book-image-resize-store và ấn Delete Chọn bucket book-image-store Ấn nút Delete Nhập book-image-store và ấn Delete Chọn bucket fcj-book-store Ấn nút Delete Nhập fcj-book-store và ấn Delete Xoá REST API Mở bảng điều khiển của API Gateway Chọn fcj-serverless-api Ấn Actions và chọn Delete Ấn Delete Xoá Lambda function Mở bảng điều khiển của AWS Lambda Chọn book_create function Ấn Actions Chọn Delete Nhập delete và ấn Delete Tương tự với resize_image, books_list, book_create, book_delete function "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]