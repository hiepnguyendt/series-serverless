[
{
	"uri": "//localhost:1313/3-deploy-lambda-function/3-1-create-dynamodb-table/",
	"title": "Create DynamoDB table",
	"tags": [],
	"description": "",
	"content": " Open template.yaml file in fcj-book-shop folder\nAdd the following script at the end of the file to create a simple table in DynamoDB:\nSimpleTable:\rType: AWS:Serverless::SimpleTable\rProperties:\rTableName: SimpleTable\rPrimaryKey:\rName: id\rType: String The script defines a SimpleTable table in DynamoDB with the Partition key is id Run the following command to deploy SAM\nsam build\rsam deploy Open DynamoDB console\nSelect Tables on the left menu. You can see SimpleTable table created But our table needs more config. So delete the above script and replace it with the following:\nBooksTable:\rType: AWS::DynamoDB::Table\rProperties:\rTableName: Books\rBillingMode: PAY_PER_REQUEST\rAttributeDefinitions:\r- AttributeName: id\rAttributeType: S\r- AttributeName: rv_id\rAttributeType: N\r- AttributeName: name\rAttributeType: S\rKeySchema:\r- AttributeName: id\rKeyType: HASH\r- AttributeName: rv_id\rKeyType: RANGE\rLocalSecondaryIndexes:\r- IndexName: name-index\rKeySchema:\r- AttributeName: id\rKeyType: HASH\r- AttributeName: name\rKeyType: RANGE\rProjection:\rProjectionType: ALL The above script creates the Books table in DynamoDB with the partition key of id, the sort key of rv_id and a Local Scondary Index. Run the following command to deploy SAM\nsam build\rsam deploy Back to DynamoDB console. The Books table have been created and SimpleTable table deleted Select Books table. Check informations of this table Click Indexes tab So you have created the Books table with the Local secondary index of name-index To add data to the table, you can download the below file. Then, open file and replace all AWS-REGION with the region that create S3 bucket - book-image-resize-shop, such as: us-east-1 Data\rdynamoDB.json\r(4 ko)\rRun the following command at the directory where you save the dynamoDB.json file\naws dynamodb batch-write-item --request-items file://dynamoDB.json "
},
{
	"uri": "//localhost:1313/4-config-api-gw/4-1-get-api/",
	"title": "Create GET API",
	"tags": [],
	"description": "",
	"content": " Open template.yaml in fcj-book-shop folder Add the following script at the end of the file creating a REST API and GET method BookApi:\rType: AWS::Serverless::Api\rName: fcj-serverless-api\rProperties:\rStageName: staging\rCors: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; # enable CORS for API\rDefinitionBody:\ropenapi: 3.0.1\rinfo:\rdescription: \u0026#34;This is the APIs for book shop web app\u0026#34;\rversion: \u0026#34;1.0.0\u0026#34;\rtitle: \u0026#34;API Gateway REST API to Lambda\u0026#34;\rpaths:\r/books:\rget:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BooksList.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Add the following script at the end of the BooksList function Events:\rListBook:\rType: Api\rProperties:\rPath: /books/\rMethod: get\rRestApiId:\rRef: BookApi Run the following command to deploy SAM\nsam build\rsam deploy Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;BooksList may not have authorization defined, Is this okay? [y/N]: \u0026quot;\nOpen Lambda console, click books_list function\nClick API Gateway Show API Gateway being interacted with function\nClick this API Gateway Display resources and GET method Click Stages on the left menu\nClick staging Click GET Record InvokeURL of GET method "
},
{
	"uri": "//localhost:1313/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-1-list-data-function/",
	"title": "Listing Lambda function",
	"tags": [],
	"description": "",
	"content": "We will create a Lambda function that reads all the data in the DynamoDB table:\nOpen template.yaml file in fcj-book-shop folder\nAdd the following script at the end of the file\nBooksList:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/books_list\rHandler: books_list.lambda_handler\rRuntime: python3.9\rFunctionName: books_list\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: ReadDynamoDB\rEffect: Allow\rAction:\r- dynamodb:Scan\r- dynamodb:Query\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Books The directory structure is as follows:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ └── books_list.py\r└── template.yaml Create fcj-book-shop/books_list folder in fcj-book-shop folder Create books_list.py file and copy the below code block to it import json\rimport boto3\rfrom decimal import *\rfrom boto3.dynamodb.types import TypeDeserializer\rclient = boto3.client(\u0026#39;dynamodb\u0026#39;) serializer = TypeDeserializer()\rclass DecimalEncoder(json.JSONEncoder):\rdef default(self, obj):\rif isinstance(obj, Decimal):\rreturn str(obj)\rreturn json.JSONEncoder.default(self, obj)\rdef deserialize(data):\rif isinstance(data, list):\rreturn [deserialize(v) for v in data]\rif isinstance(data, dict):\rtry:\rreturn serializer.deserialize(data)\rexcept TypeError:\rreturn {k: deserialize(v) for k, v in data.items()}\relse:\rreturn data\rdef lambda_handler(event, context):\rdata_books = client.scan(\rTableName=\u0026#39;Books\u0026#39;,\rIndexName=\u0026#39;name-index\u0026#39;\r)\rformat_data_books = deserialize(data_books[\u0026#34;Items\u0026#34;])\rfor book in format_data_books:\rdata_comment = client.query(\rTableName=\u0026#34;Books\u0026#34;, KeyConditionExpression=\u0026#34;id = :id AND rv_id \u0026gt; :rv_id\u0026#34;, ExpressionAttributeValues={\r\u0026#34;:id\u0026#34;: {\u0026#34;S\u0026#34;: book[\u0026#39;id\u0026#39;]}, \u0026#34;:rv_id\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;0\u0026#34;}\r}\r)\rformat_data_comment = deserialize(data_comment[\u0026#39;Items\u0026#39;])\rprint(data_comment[\u0026#39;Items\u0026#39;])\rbook[\u0026#34;comments\u0026#34;] = format_data_comment\rprint (format_data_books)\rreturn {\r\u0026#34;statusCode\u0026#34;: 200,\r\u0026#34;headers\u0026#34;: {\r\u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE, OPTIONS\u0026#34;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token,XKey,Authorization\u0026#34;\r},\r\u0026#34;body\u0026#34;: json.dumps(format_data_books, cls=DecimalEncoder)\r} Run the following command to deploy SAM\nsam build\rsam deploy Open AWS Lambda console. Click books_list function created Click Configuration tab\nSelect Permissions on the left menu Click on the role that the function is executing Expand the policy, see the permissions granted to the function "
},
{
	"uri": "//localhost:1313/1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "To start building SAM-based applications, we must first install the SAM CLI, install the AWS credentials, and initialize a simple SAM application.\nInstall SAM CLI for OS: MacOS brew tap aws/tap\rbrew install aws-sam-cli\rsam --version Linux pip install aws-sam-cli\rsam --version Windows Downloads AWS SAM CLI 64-bit Install file and check version of SAM sam --version You can refer to: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html\nIf you have already installed AWS credentials from previous posts, you can skip this step. Open IAM console\nClick User on the left menu.\nClick Create user button Enter user name, such as: AdminSAMUser\nCheck option Provide user access to the AWS Management Console\nSelect I want to create an IAM user\nSelect Custom password, then enter your password\nUncheck the User must create a new password at next sign-in\nClick Next Select Attach existing policies directly\nSelect AdministratorAccess policy to the user has full access to the services\nClick Next Click Next: Review\nReview configuration, and click Create user Click Return to users list. Click Create access key For Use case, select Command Line Interface(CLI)\nCheck to Confirmation\nClick Next Click Create access key Click Download .csv file Run the command using the terminal on your device\naws configure Enter the information corresponding to the columns in the credential file you downloaded\nAWS Access key ID: Enter access key ID AWS Secret access key: Enter secret access key Default region name: Enter region closest to you Default output format: Can be overlooked Then, create a sample SAM project Run the below commands at the directory where you want to deploy the application #Step 1 - Download a sample application\rsam init Then select the options: Which template source would you like to use?\r1 - AWS Quick Start Templates\r2 - Custom Template Location\rChoice: 1\rChoose an AWS Quick Start application template\r1 - Hello World Example\r2 - Multi-step workflow\r3 - Serverless API\r4 - Scheduled task\r5 - Standalone function\r6 - Data processing\r7 - Infrastructure event management\r8 - Machine Learning\rTemplate: 1\rUse the most popular runtime and package type? (Python and zip) [y/N]: y\rWould you like to enable X-Ray tracing on the function(s) in your application? [y/N]: n\rProject name [sam-app]: fcj-book-shop You have created a sample SAM project. Next , we will edit that project according to our application architecture. "
},
{
	"uri": "//localhost:1313/",
	"title": "Serverless - Deploying applications with SAM",
	"tags": [],
	"description": "",
	"content": "Serverless - Deploying applications with SAM Overview In the first two articles of this series, we know how to build a simple serverless web application using the AWS console. To build the serverless application faster, AWS provides users with the AWS Serverless Application Model (SAM) service, which is an open-source framework for building a serverless applications. It provides shorthand syntax to express functions, APIs, databases, and event source mappings. You define the application you want with just a few lines per resource and model it using YAML. During deployment, SAM transforms and expands the SAM syntax into AWS CloudFormation syntax. Then, CloudFormation provides the resources to the user.\nIn this workshop 3, we will rebuild the web application in workshop 2 with AWS SAM.\nThe architecture of the application we will build:\nContent Preparation Front-end deployment Deploy Lambda function Config API Gateway Test API by Postman Test API with front-end Cleanup "
},
{
	"uri": "//localhost:1313/4-config-api-gw/4-2-post-api/",
	"title": "Create POST API",
	"tags": [],
	"description": "",
	"content": " Open template.yaml file in fcj-book-store folder Add the following script at the end of the file that create the POST method post:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookCreate.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Add the following script at the end of the BookCreate function Events:\rCreateBook:\rType: Api\rProperties:\rPath: /books/\rMethod: post\rRestApiId:\rRef: BookApi Run the following command to deploy SAM sam build\rsam deploy --guided Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;BookCreate may not have authorization defined, Is this okay? [y/N]:\u0026rdquo;\nOpen book_create function console Click API Gateway Show API Gateway being interacted with this function Click this API Gateway Display the resources and POST method Click Stages on the left menu Click staging Click POST Record InvokeURL of POST method "
},
{
	"uri": "//localhost:1313/2-front-end-deployment/",
	"title": "Deploy front-end",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an S3 bucket with Static web hosting enabled and publicly accessible based on SAM:\nOpen template.yaml file in fcj-book-shop folder that we created in part 1.\nDelete unnecessary part: Copy the following script into that file:\nFcjBookShop:\rType: AWS::S3::Bucket\rProperties:\rAccessControl: PublicRead\rBucketName: fcj-book-shop\rWebsiteConfiguration:\rIndexDocument: index.html\rFcjBookShopPolicy:\rType: AWS::S3::BucketPolicy\rProperties:\rBucket: !Ref FcjBookShop\rPolicyDocument:\rVersion: 2012-10-17\rStatement:\r- Action: - \u0026#39;s3:GetObject\u0026#39;\rEffect: Allow\rPrincipal: \u0026#39;*\u0026#39;\rResource: !Join\r- \u0026#39;\u0026#39;\r- - \u0026#39;arn:aws:s3:::\u0026#39;\r- !Ref FcjBookShop The above script defines an S3 bucket is fcj-book-shop with FcjBookShopPolicy policy - allow public access Run the below command:\nTo build at the directory of the SAM project: fcj-book-shop\nsam build To check the validation of the SAM template\nsam validate To deploy SAM\nsam deploy --guided Enter stack name: fcj-book-shop\nEnter the deployemnt region, such as: us-east-1- should be the same as the default region\nThen enter other information as shown below Wait a while to create the CloudFormation stack changeset\nEnter \u0026ldquo;y\u0026rdquo; when Deploy this changeset? display Open Amazon S3 console\nCheck if the bucket has been created or not. Click fcj-book-shop bucket Click Properties tab. Then scroll down, check state of Static website hosting\nRecord the endpoint of the website Click Permissions tab\nSee the policy has been added Open CloudFormation console. Two stacks have been created\nClick fcj-book-shop stack Click Resource tab, see the resources that CloudFormation has initialized Click to other stack: Download fcj-serverless-frontend code to your device\nOpen a terminal on your computer at the directory where you want to save the source code Copy the below command git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git\rcd FCJ-Serverless-Workshop\ryarn build We have finished building the front-end. Next, execute the following command to upload the build folder to S3\naws s3 cp build s3://fcj-book-shop --recursive Result after uploading: "
},
{
	"uri": "//localhost:1313/3-deploy-lambda-function/3-2-deploy-lambda-function/",
	"title": "Deploy Lambda function",
	"tags": [],
	"description": "",
	"content": "In this step, we will create Lambda functions to read, write, and delete data in DynamoDB. Then grant the necessary permissions to those functions.\nContent Update writing Lambda function Create listing Lambda function Create deleting Lambda function Create Lambda function to edit image "
},
{
	"uri": "//localhost:1313/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-2-write-data-function/",
	"title": "Writing Lambda function",
	"tags": [],
	"description": "",
	"content": "In this step we create a new Lambda function to write data to DynamoDB on SAM\nOpen template.yaml file in fcj-book-shop folder Add the following script at the end of the file to create a Lambda function that writes data to DynamoDB BookCreate:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/book_create\rHandler: book_create.lambda_handler\rRuntime: python3.9\rFunctionName: book_create\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: BookCreateItem\rEffect: Allow\rAction:\r- dynamodb:PutItem\r- s3:PutObject\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Books\r- arn:aws:s3:::book-image-shop/* Add the following script at the end of the file to create an S3 bucket that shops uploaded image files BookImageShop:\rType: AWS::S3::Bucket\rProperties:\rBucketName: book-image-shop If you create S3 bucket name is different from the one in the lab, please update Policies | Resources of book_create function with that name\nThe directory structure is as follows:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ │ └── books_list.py\r│ ├── book_create\r│ └── book_create.py\r└── template.yaml Create book_create folder in fcj-book-shop/fcj-book-shop/ folder Create book_create.py file and copy the below code block to it import boto3\rimport json\rimport base64\rimport io\rimport cgi\rimport os\rs3 = boto3.client(\u0026#39;s3\u0026#39;)\rclient = boto3.resource(\u0026#39;dynamodb\u0026#39;)\rruntime_region = os.environ[\u0026#39;AWS_REGION\u0026#39;]\rdef get_data_from_request_body(content_type, body):\rfp = io.BytesIO(base64.b64decode(body)) # decode\renviron = {\u0026#34;REQUEST_METHOD\u0026#34;: \u0026#34;POST\u0026#34;}\rheaders = {\r\u0026#34;content-type\u0026#34;: content_type,\r\u0026#34;content-length\u0026#34;: len(body),\r}\rfs = cgi.FieldStorage(fp=fp, environ=environ, headers=headers) return [fs, None]\rdef lambda_handler(event, context):\rcontent_type = event[\u0026#39;headers\u0026#39;].get(\u0026#39;Content-Type\u0026#39;, \u0026#39;\u0026#39;) or event[\u0026#39;headers\u0026#39;].get(\u0026#39;content-type\u0026#39;, \u0026#39;\u0026#39;)\rif content_type == \u0026#39;application/json\u0026#39;:\rbook_item = json.loads(event[\u0026#34;body\u0026#34;])\relse:\rbook_data, book_data_error = get_data_from_request_body(\rcontent_type=content_type, body=event[\u0026#34;body\u0026#34;]\r)\rname = book_data[\u0026#39;image\u0026#39;].filename\rimage = book_data[\u0026#39;image\u0026#39;].value\rs3.put_object(Bucket=\u0026#39;book-image-shop\u0026#39;, Key=name, Body=image)\rimage_path = \u0026#34;https://{}.s3.{}.amazonaws.com/{}\u0026#34;.format(\u0026#34;book-image-resize-shop\u0026#34;, runtime_region, name)\rbook_item = {\r\u0026#34;id\u0026#34;: book_data[\u0026#39;id\u0026#39;].value,\r\u0026#34;rv_id\u0026#34;: 0,\r\u0026#34;name\u0026#34;: book_data[\u0026#39;name\u0026#39;].value,\r\u0026#34;author\u0026#34;: book_data[\u0026#39;author\u0026#39;].value,\r\u0026#34;price\u0026#34; : book_data[\u0026#39;price\u0026#39;].value,\r\u0026#34;category\u0026#34;: book_data[\u0026#39;category\u0026#39;].value,\r\u0026#34;description\u0026#34;: book_data[\u0026#39;description\u0026#39;].value,\r\u0026#34;image\u0026#34;: image_path\r}\rtable = client.Table(\u0026#39;Books\u0026#39;)\rtable.put_item(Item = book_item)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: \u0026#39;successfully created item!\u0026#39;,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r}\rreturn response Run the following command to deploy SAM\nsam build\rsam deploy Back to AWS Lambda console\nClick book_create function created Click Configuration tab\nSelect Permissions on the left menu Click on the role that the function is executing Expand the policy, see the permissions granted to the function Open Amazon S3 console, the book-image-shop bucket has been created "
},
{
	"uri": "//localhost:1313/4-config-api-gw/4-3-delete-api/",
	"title": "Create DELETE API",
	"tags": [],
	"description": "",
	"content": " Open template.yaml file in fcj-book-store folder Add the following script at the end of the file that create the DELETE method /books/{id}:\rdelete:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookDelete.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Add the following script at the end of the BookDelete function Events:\rDeleteBook:\rType: Api\rProperties:\rPath: /books/{id}\rMethod: delete\rRestApiId:\rRef: BookApi Run the following command to deploy SAM sam build\rsam deploy --guided Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;BookDelete may not have authorization defined, Is this okay? [y/N]: \u0026quot;\nOpen book_delete function console Click API Gateway Show API Gateway being interacted with this function Click this API Gateway Display the resources and DELETE method Click Stages on the left menu Click staging Click DELTE Record the InvokeURL of DELETE method Add the following script at the end of the template.yaml file to API can support Binary Media Types files BinaryMediaTypes: - multipart~1form-data Run the following command to deploy SAM sam build\rsam deploy --guided Back to API console Select Settings on the left menu Scroll down, check if multipart/form-data has been added under Binary Meida Types "
},
{
	"uri": "//localhost:1313/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-3-delete-data-function/",
	"title": "Deleting Lambda function",
	"tags": [],
	"description": "",
	"content": "We will create a Lambda function that deletes all items with the specified partition key and sort key in the DynamoDB table. And delete the image file in the S3 bucket:\nOpen template.yaml file in fcj-book-shop folder Add the following script at the end of the file to create a Lambda function that deletes data of DynamoDB table BookDelete:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/book_delete\rHandler: book_delete.lambda_handler\rRuntime: python3.9\rFunctionName: book_delete\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- dynamodb:DeleteItem\r- dynamodb:GetItem\r- dynamodb:Query\r- s3:DeleteObject\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Books\r- arn:aws:s3:::book-image-resize-shop/* Add the following script at the end of the file to create an S3 bucket that saves the image after resizing with CORS rule and policy settings BookImageResizeShop:\rType: AWS::S3::Bucket\rProperties:\rAccessControl: PublicRead\rBucketName: book-image-resize-shop\rCorsConfiguration:\rCorsRules:\r- AllowedHeaders:\r- \u0026#39;*\u0026#39;\rAllowedMethods:\r- GET\r- PUT\r- POST\r- DELETE\rAllowedOrigins:\r- \u0026#39;*\u0026#39;\rBookImageResizeShopPolicy:\rType: AWS::S3::BucketPolicy\rProperties:\rBucket: !Ref BookImageResizeShop\rPolicyDocument:\rVersion: 2012-10-17\rStatement:\r- Action: - \u0026#39;s3:GetObject\u0026#39;\rEffect: Allow\rPrincipal: \u0026#39;*\u0026#39;\rResource: !Join\r- \u0026#39;\u0026#39;\r- - \u0026#39;arn:aws:s3:::\u0026#39;\r- !Ref BookImageResizeShop\r- /* If you create S3 bucket names that are different from the ones in the lab, please check Policies | Resources of services and update.\nThe directory structure is as follows:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ │ └── books_list.py\r│ ├── book_create\r│ │ └── book_create.py\r│ └── book_delete\r│ └── book_delete.py\r└── template.yaml Create book_delete folder in fcj-book-shop/fcj-book-shop/ folder Create book_delete.py file and copy the below code block to it import boto3\rimport json\rs3 = boto3.client(\u0026#39;s3\u0026#39;)\rclient = boto3.resource(\u0026#39;dynamodb\u0026#39;)\rdef get_image_name(image_path):\rstr_image = image_path.split(\u0026#34;/\u0026#34;)\rfor image_path_item in str_image:\rimage_name = image_path_item\rreturn image_name;\rdef lambda_handler(event, context):\rerror = None\rstatus = 200\rdelete_id = event[\u0026#39;pathParameters\u0026#39;]\rdelete_id[\u0026#39;rv_id\u0026#39;] = 0\rtable = client.Table(\u0026#34;Books\u0026#34;)\rimage_path = \u0026#34;\u0026#34;\rtry:\rdata = table.get_item(Key = delete_id)\rimage_path = data[\u0026#39;Item\u0026#39;][\u0026#39;image\u0026#39;]\rimage_name = get_image_name(image_path)\rexcept Exception as e:\rerror = e\rtry:\rresponse = table.query(\rProjectionExpression=\u0026#34;rv_id\u0026#34;, KeyConditionExpression=\u0026#34;id = :id\u0026#34;, ExpressionAttributeValues={\u0026#34;:id\u0026#34;: delete_id[\u0026#39;id\u0026#39;]})\rfor item in response[\u0026#39;Items\u0026#39;]:\rdelete_id[\u0026#39;rv_id\u0026#39;] = item[\u0026#39;rv_id\u0026#39;]\rprint(delete_id)\rtable.delete_item(Key = delete_id)\rprint(image_name)\rs3.delete_object(Bucket=\u0026#39;book-image-resize-shop\u0026#39;, Key=image_name)\rexcept Exception as e:\rerror = e\rif error is None:\rmessage = \u0026#39;successfully deleted item!\u0026#39;\relse:\rmessage = \u0026#39;delete item fail\u0026#39;\rstatus = 400\rreturn {\r\u0026#39;statusCode\u0026#39;: status,\r\u0026#39;body\u0026#39;: message,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\r} Run the following command to deploy SAM\nsam build\rsam deploy Back to Lambda console\nClick book_delete function created Click Configuration tab\nSelect Permissions on the left menu Click on the role that the function is executing Expand the policy, see the permissions granted to the function Open Amazon S3 console, the book-image-resize-shop bucket created\nClick to this bucket Click Permissions tab, see the policy added to the bucket Scroll down to bottom, see Cross-origin resource sharing have been configed "
},
{
	"uri": "//localhost:1313/3-deploy-lambda-function/",
	"title": "Deploy Lambda function",
	"tags": [],
	"description": "",
	"content": "In this section we will three Lambda functions to write, read, and delete data in DynamoDB with Python based on AWS SAM.\nContent Create DynamoDB table Deploy Lambda function "
},
{
	"uri": "//localhost:1313/4-config-api-gw/",
	"title": "Config API Gateway",
	"tags": [],
	"description": "",
	"content": "Next, we will config the API Gateway to interact with the Lambda functions created in the previous section on SAM:\nContent Create GET API Create POST API Create DELETE API "
},
{
	"uri": "//localhost:1313/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-4-resize-image-function/",
	"title": "Resizing image Lmabda function ",
	"tags": [],
	"description": "",
	"content": "In this step we create a new Lambda function that resizes the image after the user uploads it.\nOpen template.yaml file in fcj-book-shop folder Add the following script at the end of the file to create resizing image function ImageResizer:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/resize_image/function.zip\rPackageType: Zip\rHandler: index.handler\rRuntime: nodejs16.x\rFunctionName: resize_image\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: ResizeUploadImage\rEffect: Allow\rAction:\r- s3:GetObject\r- s3:PutObject\r- s3:DeleteObject\rResource:\r- arn:aws:s3:::book-image-shop/*\r- arn:aws:s3:::book-image-resize-shop/*\rEvents:\rResizeImage:\rType: S3\rProperties:\rBucket: !Ref BookImageShop\rEvents: s3:ObjectCreated:*\rEnvironment:\rVariables:\rWIDTH: 200\rHEIGHT: 280\rDES_BUCKET: book-image-resize-shop If you create S3 bucket names that are different from the ones in the lab, please check Policies | Resources or Environment of resources and update.\nAdd the following script at the end of the file to grant permission to the books-image-shop bucket to use this function\nLambdaInvokePermission:\rType: \u0026#34;AWS::Lambda::Permission\u0026#34;\rProperties:\rFunctionName: !GetAtt ImageResizer.Arn\rAction: \u0026#34;lambda:InvokeFunction\u0026#34;\rPrincipal: \u0026#34;s3.amazonaws.com\u0026#34;\rSourceAccount: !Sub ${AWS::AccountId}\rSourceArn: !GetAtt BookImageShop.Arn The directory structure is as follows:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ │ └── books_list.py\r│ ├── book_create\r│ │ └── book_create.py\r│ ├── book_delete\r│ │ └── book_delete.py\r│ ├── resize_image\r│ └── function.zip\r└── template.yaml Create resize_image folder in fcj-book-shop/fcj-book-shop/ folder Download the below file and copy to this folder Source code\rfunction.zip\r(8382 ko)\rRun the following command to deploy SAM\nsam build\rsam deploy Back to Lambda console\nClick resize_image function created Click Configuration tab\nSelect Trigger on the left menu, display S3 bucket - book-image-shop Select Permissions on the left menu\nClick on the role that the function is executing Expand the policy, see the permissions granted to the function "
},
{
	"uri": "//localhost:1313/5-test-api-by-postman/",
	"title": "Test APIs by Postman",
	"tags": [],
	"description": "",
	"content": "In this step, we will test operation of the APIs using Postman tool.\nTest the listing API Click + to add a new tab Select GET method Enter URL of the listing API that recorded from the previous step Click Send The returned result is the entire data of the Books table that has been processed Test the writing API Similarly create a new tab Select POST method Enter URL of the writing API that recorded from the previous step In Body pattern, select raw Copy the below text block: {\r\u0026#34;id\u0026#34;: \u0026#34;5\u0026#34;,\r\u0026#34;rv_id\u0026#34;: 0,\r\u0026#34;name\u0026#34;: \u0026#34;Amazon Web Services in Action 2nd Edition\u0026#34;,\r\u0026#34;author\u0026#34;: \u0026#34;Andreas Wittig\u0026#34;,\r\u0026#34;price\u0026#34;: \u0026#34;59.99\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;IT\u0026#34;,\r\u0026#34;description\u0026#34;: \u0026#34;Amazon Web Services in Action, Second Edition is a comprehensive introduction to computing, storing, and networking in the AWS cloud. You\u0026#39;ll find clear, relevant coverage of all the essential AWS services you to know, emphasizing best practices for security, high availability and scalability.\u0026#34;,\r\u0026#34;image\u0026#34;: \u0026#34;https://book-image-resize-store.s3.ap-southeast-2.amazonaws.com/aws.jpg\u0026#34;\r} Switch to Headers Add KEY is Content-Type, VALUE is application/json Click Send Wait a moment, see the results returned Open Books table in DynamoDB console to check data Before call the write API After call the write API Test the deleting API Since the delete Lambda function on execution deletes images uploaded by the user, we manually upload the images to the S3 bucket so the API can run properly.\nOpen Amazon S3 console\nClick book-image-store bucket\nClick Upload Click Add files Tải ảnh sau về máy của bạn và chọn nó để tải lên bucket Image\raws.jpg\r(24 ko)\r6. Click Upload After the upload is done, switch to book-image-resize-store bucket to check. This is execution result of reszie_image Lambda funtion Back to Postman, add a new tab to call the delete API Select GET method Enter URL of the deleting API that recorded from the previous step, replace /{id} with /5 Click Send Check the returned result: Open Books table in DynamoDB console to check data Open book-image-resize-store bucket to check object. The aws.jpg is deleted "
},
{
	"uri": "//localhost:1313/6-test-front-end/",
	"title": "Test APIs with front-end",
	"tags": [],
	"description": "",
	"content": "After testing that the APIs work properly with Postman, we will test the APIs that are called with the front-end built from part 2.\nOpen config.js in fcj-serverless-frontend folder that downloaded from part 2 Change value of APP_API_URL with your URL: Open App.js in fcj-serverless-frontend/src/, change value of isAdmin with true Run the command lines under here: yarn build\raws s3 cp build s3://fcj-book-store --recursive Paste the endpoint of S3 static web into your browser. The app already shows the book information, but still no pictures because we haven\u0026rsquo;t uploaded the pictures yet. So the listing API is working properly\nTest writing API Click Management tab Click Update Edit whatever you want except id Click Choose image Upload the below image to the bucket: Image\rDockerInAction.jpeg\r(33 ko)\rClick Update Click OK Image and information updated Click on the Create new book tab to write new data to the database Enter id with 5 Enter name: Amazon Web Services in Action Enter the author: Andreas Wittig Enter category: IT Enter price: 59.99 Enter a description: Amazon Web Services in Action, Second Edition is a comprehensive introduction to computing, storing, and networking in the AWS cloud. You'll find clear, relevant coverage of all the essential AWS services you to know, emphasizing best practices for security, high availability, and scalability. Image\raws.jpg\r(24 ko)\rPress the Choose File button to upload the image Press the Create button Click OK Display newly created information Test the deleting API Click Management tab Click Update Click Delete Click OK to confirm delete Click OK View results after deleting: no appearing book information We have finished building a simple SAM-based web application following the serverless model.\n"
},
{
	"uri": "//localhost:1313/7-cleanup/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Empty S3 bucket Open AWS S3 console Select fcj-book-store Click Empty Enter permanently delete Click Empty Do the same for bucket starting with aws-sam-cli-managed-default- Delete CloudFormation stacks Execute the below command to delete the AWS SAM application sam delete --stack-name fcj-book-store\rsam delete --stack-name aws-sam-cli-managed-default "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]