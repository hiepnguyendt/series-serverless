[
{
	"uri": "//localhost:1313/vi/1-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Để bắt đầu xây dựng các ứng dụng dựa trên SAM, đầu tiên chúng ta phải cài đặt SAM CLI, cài đặt AWS credentials và khởi tạo một SAM application đơn giản.\nCài đặt SAM CLI cho hệ điều hành MacOS brew tap aws/tap\rbrew install aws-sam-cli\rsam --version Linux pip install aws-sam-cli\rsam --version Windows Tải tệp cài đặt AWS SAM CLI 64-bit Cài đặt tệp và kiểm tra version của SAM sam --version Bạn có thể tham khảo tại: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html\nNếu bạn đã cài đặt AWS credentials từ những bài trước thì có thể bỏ qua bước này.\nMở bảng điều khiển của IAM console\nẤn vào User ở menu phía bên trái\nẤn nút Create user Nhập tên người dùng, ví dụ: AdminSAMUser\nChọn option Provide user access to the AWS Management Console\nChọn I want to create an IAM user\nChọn Custom password, sau đó nhập mật khẩu của bạn\nBỏ chọn mục User must create a new password at next sign-in\nẤn nút Next Chọn Attach existing policies directly\nChọn policy AdministratorAccess để người dùng có toàn bộ quyền truy cập vào các service\nẤn Next Ấn Next: Review\nXem lại các thiết lập, và ấn Create user Ấn vào Return to users list. Ấn nút Create access key Tại mục Use case, chọn Command Line Interface(CLI)\nCheck để xác nhận\nClick Next Chạy câu lệnh bằng terminal trên máy của bạn\naws configure Nhập thông tin tương ứng với các cột trong tệp credential mà bạn tải về\nAWS Access key ID: Nhập access key ID AWS Secret access key: Nhập secret access key Default region name: Nhập region gần bạn nhất Default output format: Có thể bỏ qua Sau đó, khởi tạo một project SAM mẫu\nChạy các dòng lệnh dưới đây tại thư mục bạn muốn triển khai ứng dụng #Step 1 - Download a sample application\rsam init Sau đó chọn các tuỳ chọn: Which template source would you like to use?\r1 - AWS Quick Start Templates\r2 - Custom Template Location\rChoice: 1\rChoose an AWS Quick Start application template\r1 - Hello World Example\r2 - Multi-step workflow\r3 - Serverless API\r4 - Scheduled task\r5 - Standalone function\r6 - Data processing\r7 - Infrastructure event management\r8 - Machine Learning\rTemplate: 1\rUse the most popular runtime and package type? (Python and zip) [y/N]: y\rWould you like to enable X-Ray tracing on the function(s) in your application? [y/N]: n\rProject name [sam-app]: fcj-book-shop Bạn đã tạo khởi tạo một project SAM mẫu. Bước tiếp theo chúng ta sẽ chỉnh sửa project đó theo kiến trúc ứng dụng của mình.\n"
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-1-list-data-function/",
	"title": "Lambda function đọc dữ liệu",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tạo một Lambda function đọc toàn bộ dữ liệu trong bảng của DynamoDB:\nMở tệp template.yaml trong thư mục fcj-book-shop\nThêm đoạn script sau vào cuối tệp\nBooksList:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/books_list\rHandler: books_list.lambda_handler\rRuntime: python3.9\rFunctionName: books_list\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: ReadDynamoDB\rEffect: Allow\rAction:\r- dynamodb:Scan\r- dynamodb:Query\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Books Cấu trúc thư mục như sau:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ ├── books_list.py\r└── template.yaml Tạo thư mục tên fcj-book-shop/books_list trong thư mục fcj-book-shop Tạo file books_list.py và sao chép đoạn code sau vào nó import json\rimport boto3\rfrom decimal import *\rfrom boto3.dynamodb.types import TypeDeserializer\rclient = boto3.client(\u0026#39;dynamodb\u0026#39;) serializer = TypeDeserializer()\rclass DecimalEncoder(json.JSONEncoder):\rdef default(self, obj):\rif isinstance(obj, Decimal):\rreturn str(obj)\rreturn json.JSONEncoder.default(self, obj)\rdef deserialize(data):\rif isinstance(data, list):\rreturn [deserialize(v) for v in data]\rif isinstance(data, dict):\rtry:\rreturn serializer.deserialize(data)\rexcept TypeError:\rreturn {k: deserialize(v) for k, v in data.items()}\relse:\rreturn data\rdef lambda_handler(event, context):\rdata_books = client.scan(\rTableName=\u0026#39;Books\u0026#39;,\rIndexName=\u0026#39;name-index\u0026#39;\r)\rformat_data_books = deserialize(data_books[\u0026#34;Items\u0026#34;])\rfor book in format_data_books:\rdata_comment = client.query(\rTableName=\u0026#34;Books\u0026#34;, KeyConditionExpression=\u0026#34;id = :id AND rv_id \u0026gt; :rv_id\u0026#34;, ExpressionAttributeValues={\r\u0026#34;:id\u0026#34;: {\u0026#34;S\u0026#34;: book[\u0026#39;id\u0026#39;]}, \u0026#34;:rv_id\u0026#34;: {\u0026#34;N\u0026#34;: \u0026#34;0\u0026#34;}\r}\r)\rformat_data_comment = deserialize(data_comment[\u0026#39;Items\u0026#39;])\rprint(data_comment[\u0026#39;Items\u0026#39;])\rbook[\u0026#34;comments\u0026#34;] = format_data_comment\rprint (format_data_books)\rreturn {\r\u0026#34;statusCode\u0026#34;: 200,\r\u0026#34;headers\u0026#34;: {\r\u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE, OPTIONS\u0026#34;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token,XKey,Authorization\u0026#34;\r},\r\u0026#34;body\u0026#34;: json.dumps(format_data_books, cls=DecimalEncoder)\r} Chạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy Mở bảng điều khiển của AWS Lambda. Ấn vào books_list function đã được tạo Ấn sang tab Configuration\nChọn Permissions ở menu phía bên trái Ấn vào role mà function đang thực hiện Mở rộng policy, thấy các quyền đã được cấp cho function "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Serverless - Triển khai ứng dụng bằng SAM",
	"tags": [],
	"description": "",
	"content": "Serverless - Triển khai ứng dụng trên SAM Tổng quan Trong hai bài đầu tiên của series này, chúng ta đã tìm hiểu cách xây dựng một ứng dụng web đơn giản theo mô hình serverless trên cách sử dụng bảng điều khiển của AWS. Để xây dựng ứng dụng serverless nhanh hơn, AWS cung cấp cho người dùng dịch vụ AWS Serverless Application Model (SAM) - là một open-source framework để xây dựng một ứng dụng serverless. SAM cung cấp cú pháp để diễn đạt các hàm, API, cơ sở dữ liệu và event source mappings. Chỉ với vài dòng cho mỗi tài nguyên, bạn có thể xác định ứng dụng bạn muốn và lập mô hình ứng dụng đó bằng YAML. Trong quá trình triển khai, SAM chuyển đổi và mở rộng cú pháp SAM thành cú pháp của AWS CloudFormation. Sau đó, CloudFormation cung cấp các tài nguyên cho người dùng.\nTrong bài số 3 này, chúng ta sẽ cùng nhau xây dựng lại ứng dụng web ở bài số 2 với AWS SAM.\nKiến trúc của ứng dụng chúng ta sẽ xây dựng:\nNội dung Chuẩn bị Triển khai front-end Triển khai Lambda function Cấu hình API Gateway Kiểm tra API với Postman Kiểm tra API với front-end Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-1-create-dynamodb-table/",
	"title": "Tạo bảng trong DynamoDB",
	"tags": [],
	"description": "",
	"content": " Mở tệp template.yaml trong thư mục fcj-book-store\nThêm đoạn script sau vào cuối tệp để tạo một bảng đơn giản trong DynamoDB:\nSimpleTable:\rType: AWS:Serverless::SimpleTable\rProperties:\rTableName: SimpleTable\rPrimaryKey:\rName: id\rType: String Đoạn script định nghĩa một bảng SimpleTable trong DynamoDB với Partition key là id Chạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy Mở bảng điều khiển của DynamoDB\nChọn Tables ở menu phía bên trái. Bạn sẽ thấy SimpleTable đã được tạo Nhưng bảng của chúng ta cần nhiều thiết lập hơn. Vì vậy bạn hãy xoá đoạn script trên đi thay bằng đoạn sau:\nBooksTable:\rType: AWS::DynamoDB::Table\rProperties:\rTableName: Books\rBillingMode: PAY_PER_REQUEST\rAttributeDefinitions:\r- AttributeName: id\rAttributeType: S\r- AttributeName: rv_id\rAttributeType: N\r- AttributeName: name\rAttributeType: S\rKeySchema:\r- AttributeName: id\rKeyType: HASH\r- AttributeName: rv_id\rKeyType: RANGE\rLocalSecondaryIndexes:\r- IndexName: name-index\rKeySchema:\r- AttributeName: id\rKeyType: HASH\r- AttributeName: name\rKeyType: RANGE\rProjection:\rProjectionType: ALL Đoạn script trên giúp tạo bảng Books trong DynamoDB với partition key là id, sort key là rv_id và một Local Scondary Index. Chạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy Quay lại với bảng điều khiển của DynamoDB. Bảng Books đã được tạo và bảng SimpleTable đã xoá. Ấn chọn bảng Books. Kiểm tra các thông tin của bảng Ấn sang tab Indexes Vậy là bạn đã tạo xong bảng Books với Local secondary index là name-index Để thêm dữ liệu cho bảng, bạn có thể tải tệp dưới đây. Mở tệp, sau đó thay toàn bộ AWS-REGION bằng vùng mà bạn tạo S3 bucket book-image-resize-store, ví dụ: ap-southeast-1\nData\rdynamoDB.json\r(4 ko)\rChạy câu lệnh sau tại thư mục mà bạn lưu tệp dynamoDB.json aws dynamodb batch-write-item --request-items file://dynamoDB.json "
},
{
	"uri": "//localhost:1313/vi/4-config-api-gw/4-1-get-api/",
	"title": "Tạo GET API",
	"tags": [],
	"description": "",
	"content": " Mở tệp template.yaml trong thư mục fcj-book-shop Thêm đoạn script sau vào cuối tệp tạo một REST API và GET method BookApi:\rType: AWS::Serverless::Api\rName: fcj-serverless-api\rProperties:\rStageName: staging\rCors: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; # enable CORS for API\rDefinitionBody:\ropenapi: 3.0.1\rinfo:\rdescription: \u0026#34;This is the APIs for book shop web app\u0026#34;\rversion: \u0026#34;1.0.0\u0026#34;\rtitle: \u0026#34;API Gateway REST API to Lambda\u0026#34;\rpaths:\r/books:\rget:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BooksList.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Thêm đoạn script sau vào cuối của function BooksList Events:\rListBook:\rType: Api\rProperties:\rPath: /books/\rMethod: get\rRestApiId:\rRef: BookApi Chạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;BooksList may not have authorization defined, Is this okay? [y/N]: \u0026quot;\nMở bảng điều khiển của function books_list\nẤn vào API Gateway Hiện thị API Gateway đang được tương tác với function\nẤn vào API Gateway đó Hiện thị các resource và GET method Chọn tab Stages ở menu phía bên trái\nẤn chọn staging Ấn chọn GET Ghi lại InvokeURL của method GET "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-2-write-data-function/",
	"title": "Lambda function ghi dữ liệu",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta tạo một Lambda function mới để ghi dữ liệu vào DynamoDB trên SAM\nMở tệp template.yaml trong thư mục fcj-book-shop Thêm đoạn script sau vào cuối tệp để tạo Lambda function ghi dữ liệu vào DynamoDB BookCreate:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/book_create\rHandler: book_create.lambda_handler\rRuntime: python3.9\rFunctionName: book_create\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: BookCreateItem\rEffect: Allow\rAction:\r- dynamodb:PutItem\r- s3:PutObject\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Books\r- arn:aws:s3:::book-image-shop/* Thêm đoạn script sau vào cuối tệp để tạo S3 bucket lưu tập ảnh người dùng tải lên BookImageShop:\rType: AWS::S3::Bucket\rProperties:\rBucketName: book-image-shop Nếu bạn tạo các bộ chứa S3 có tên khác với tên trong bài lab, vui lòng cập nhật Policies | Resource của function book_create với tên đó\nCấu trúc thư mục như sau:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ │ └── books_list.py\r│ ├── book_create\r│ └── book_create.py\r└── template.yaml Tạo thư mục tên book_create trong thư mục fcj-book-shop/fcj-book-shop/ Tạo file book_create.py và sao chép đoạn code sau vào nó import boto3\rimport json\rimport base64\rimport io\rimport cgi\rimport os\rs3 = boto3.client(\u0026#39;s3\u0026#39;)\rclient = boto3.resource(\u0026#39;dynamodb\u0026#39;)\rruntime_region = os.environ[\u0026#39;AWS_REGION\u0026#39;]\rdef get_data_from_request_body(content_type, body):\rfp = io.BytesIO(base64.b64decode(body)) # decode\renviron = {\u0026#34;REQUEST_METHOD\u0026#34;: \u0026#34;POST\u0026#34;}\rheaders = {\r\u0026#34;content-type\u0026#34;: content_type,\r\u0026#34;content-length\u0026#34;: len(body),\r}\rfs = cgi.FieldStorage(fp=fp, environ=environ, headers=headers) return [fs, None]\rdef lambda_handler(event, context):\rcontent_type = event[\u0026#39;headers\u0026#39;].get(\u0026#39;Content-Type\u0026#39;, \u0026#39;\u0026#39;) or event[\u0026#39;headers\u0026#39;].get(\u0026#39;content-type\u0026#39;, \u0026#39;\u0026#39;)\rif content_type == \u0026#39;application/json\u0026#39;:\rbook_item = json.loads(event[\u0026#34;body\u0026#34;])\relse:\rbook_data, book_data_error = get_data_from_request_body(\rcontent_type=content_type, body=event[\u0026#34;body\u0026#34;]\r)\rname = book_data[\u0026#39;image\u0026#39;].filename\rimage = book_data[\u0026#39;image\u0026#39;].value\rs3.put_object(Bucket=\u0026#39;book-image-shop\u0026#39;, Key=name, Body=image)\rimage_path = \u0026#34;https://{}.s3.{}.amazonaws.com/{}\u0026#34;.format(\u0026#34;book-image-resize-shop\u0026#34;, runtime_region, name)\rbook_item = {\r\u0026#34;id\u0026#34;: book_data[\u0026#39;id\u0026#39;].value,\r\u0026#34;rv_id\u0026#34;: 0,\r\u0026#34;name\u0026#34;: book_data[\u0026#39;name\u0026#39;].value,\r\u0026#34;author\u0026#34;: book_data[\u0026#39;author\u0026#39;].value,\r\u0026#34;price\u0026#34; : book_data[\u0026#39;price\u0026#39;].value,\r\u0026#34;category\u0026#34;: book_data[\u0026#39;category\u0026#39;].value,\r\u0026#34;description\u0026#34;: book_data[\u0026#39;description\u0026#39;].value,\r\u0026#34;image\u0026#34;: image_path\r}\rtable = client.Table(\u0026#39;Books\u0026#39;)\rtable.put_item(Item = book_item)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;body\u0026#39;: \u0026#39;successfully created item!\u0026#39;,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;,\r\u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34;\r},\r}\rreturn response Chạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy Trở lại với bảng điều khiển của Lambda\nẤn vào function book_create đã được tạo Ấn sang tab Configuration\nChọn mục Permissions ở menu bên trái Ấn vào role mà function đang thực hiện. Mở rộng policy, thấy các quyền đã được cấp cho function Mở bảng điều khiển của Amazon S3, bucket book-image-shop đã được tạo "
},
{
	"uri": "//localhost:1313/vi/4-config-api-gw/4-2-post-api/",
	"title": "Tạo POST API",
	"tags": [],
	"description": "",
	"content": " Mở tệp template.yaml trong thư mục fcj-book-shop Thêm đoạn script sau vào cuối tệp tạo method POST post:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookCreate.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Thêm đoạn script sau vào cuối của function BookCreate Events:\rCreateBook:\rType: Api\rProperties:\rPath: /books/\rMethod: post\rRestApiId:\rRef: BookApi Chạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy --guided Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;BookCreate may not have authorization defined, Is this okay? [y/N]:\u0026rdquo;\nMở bảng điều khiển của function book_create\nẤn vào API Gateway Hiện thị API Gateway đang được tương tác với function\nẤn vào API Gateway đó Hiện thị các resource và method POST Chọn tab Stages ở menu phía bên trái\nẤn chọn staging Ấn chọn POST Ghi lại InvokeURL của method POST "
},
{
	"uri": "//localhost:1313/vi/2-front-end-deployment/",
	"title": "Triển khai front-end",
	"tags": [],
	"description": "",
	"content": "Bước phần này, chúng ta sẽ tạo một S3 bucket với Static web hosting được kích hoạt và được truy cập công cộng dựa trên SAM:\nMở tệp template.yaml trong thư mục fcj-book-shop mà chúng ta vừa tạo ở phần 1.\nXoá phần không cần thiết: Sao chép đoạn script sau vào tệp đó:\nFcjBookShop:\rType: AWS::S3::Bucket\rProperties:\rAccessControl: PublicRead\rBucketName: fcj-book-shop\rWebsiteConfiguration:\rIndexDocument: index.html\rFcjBookShopPolicy:\rType: AWS::S3::BucketPolicy\rProperties:\rBucket: !Ref FcjBookShop\rPolicyDocument:\rVersion: 2012-10-17\rStatement:\r- Action: - \u0026#39;s3:GetObject\u0026#39;\rEffect: Allow\rPrincipal: \u0026#39;*\u0026#39;\rResource: !Join\r- \u0026#39;\u0026#39;\r- - \u0026#39;arn:aws:s3:::\u0026#39;\r- !Ref FcjBookShop\r- /* Đoạn script định nghĩa một S3 bucket fcj-book-shop với policy là FcjBookShopPolicy - cho phép truy cập công cộng Chạy dòng lệnh dưới đây:\nĐể build tại thư mục của SAM project: fcj-book-shop\nsam build Để kiểm tra tính chính xác của SAM template\nsam validate Để triển khai SAM\nsam deploy --guided Nhập tên cho stack: fcj-book-shop\nNhập vùng mà bạn muốn triển khai, ví dụ: us-east-1\nSau đó nhập các thông tin khác như hình dưới đây: Đợi một lúc để tạo CloudFormation stack changeset\nNhập \u0026ldquo;y\u0026rdquo; khi được hỏi Deploy this changeset? Mở bảng điều khiển của Amazon S3\nKiểm tra xem bucket đã được tạo hay chưa. Ấn vào bucket fcj-book-shop Ấn sang tab Properties. Kéo xuống cuối trang, kiểm tra trạng thái của Static website hosting\nGhi lại endpoint của website Ấn sang tab Permissions\nThấy policy đã được thêm Mở bảng điều khiển của CloudFormation. Hai stack đã được tạo\nẤn vào stack fcj-book-shop Ấn sang tab Resource, thấy những resource mà CloudFormation đã khởi tạo Ấn sang stack còn lại: Tải code fcj-serverless-frontend về máy của bạn\nMở terminal trên máy bạn tại thư mục bạn muốn lưu source code Sao chép câu lệnh dưới đây git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git\rcd FCJ-Serverless-Workshop\ryarn build Chúng ta đã build xong front-end. Tiếp theo thực hiện câu lệnh sau để tải thư mục build lên S3\naws s3 cp build s3://fcj-book-shop --recursive Kết quả sau khi tải xong: "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/",
	"title": "Triển khai Lambda function",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ lần lượt tạo các Lambda function để đọc, ghi và xoá dữ liệu trong DynamoDB. Sau đó cấp các quyền cần thiết cho các function đó.\nNội dung Lambda function ghi dữ liệu Tạo function lấy dữ liệu Tạo function xoá dữ liệu Tạo Lambda function chỉnh ảnh "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-3-delete-data-function/",
	"title": "Lambda function xoá dữ liệu",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tạo một Lambda function xoá toàn bộ item có partition key và sort key được chỉ định trong bảng của DynamoDB. Và xoá cả tệp ảnh trong S3 bucket:\nMở tệp template.yaml trong thư mục fcj-book-shop Thêm đoạn script sau vào cuối tệp để tạo Lambda function xoá dữ liệu của DynamoDB BookDelete:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/book_delete\rHandler: book_delete.lambda_handler\rRuntime: python3.9\rFunctionName: book_delete\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: VisualEditor0\rEffect: Allow\rAction:\r- dynamodb:DeleteItem\r- dynamodb:GetItem\r- dynamodb:Query\r- s3:DeleteObject\rResource:\r- !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Books\r- arn:aws:s3:::book-image-resize-shop/* Thêm đoạn script sau vào cuối tệp để tạo S3 bucket lưu tập ảnh sau khi thay đổi kích thước với thiết lập CORS rule và policy BookImageResizeShop:\rType: AWS::S3::Bucket\rProperties:\rAccessControl: PublicRead\rBucketName: book-image-resize-shop\rCorsConfiguration:\rCorsRules:\r- AllowedHeaders:\r- \u0026#39;*\u0026#39;\rAllowedMethods:\r- GET\r- PUT\r- POST\r- DELETE\rAllowedOrigins:\r- \u0026#39;*\u0026#39;\rBookImageResizeShopPolicy:\rType: AWS::S3::BucketPolicy\rProperties:\rBucket: !Ref BookImageResizeShop\rPolicyDocument:\rVersion: 2012-10-17\rStatement:\r- Action: - \u0026#39;s3:GetObject\u0026#39;\rEffect: Allow\rPrincipal: \u0026#39;*\u0026#39;\rResource: !Join\r- \u0026#39;\u0026#39;\r- - \u0026#39;arn:aws:s3:::\u0026#39;\r- !Ref BookImageResizeShop\r- /* Nếu bạn tạo tên của S3 bucket khác với tên trong bài lab, vui lòng kiểm tra Policies | Resources của các dịch vụ và cập nhật.\nCấu trúc thư mục như sau:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ │ └── books_list.py\r│ ├── book_create\r│ │ └── book_create.py\r│ └── book_delete\r│ └── book_delete.py\r└── template.yaml Tạo thư mục tên book_delete trong thư mục fcj-book-shop/fcj-book-shop/ Tạo file book_delete.py và sao chép đoạn code sau vào nó import boto3\rimport json\rs3 = boto3.client(\u0026#39;s3\u0026#39;)\rclient = boto3.resource(\u0026#39;dynamodb\u0026#39;)\rdef get_image_name(image_path):\rstr_image = image_path.split(\u0026#34;/\u0026#34;)\rfor image_path_item in str_image:\rimage_name = image_path_item\rreturn image_name;\rdef lambda_handler(event, context):\rerror = None\rstatus = 200\rdelete_id = event[\u0026#39;pathParameters\u0026#39;]\rdelete_id[\u0026#39;rv_id\u0026#39;] = 0\rtable = client.Table(\u0026#34;Books\u0026#34;)\rimage_path = \u0026#34;\u0026#34;\rtry:\rdata = table.get_item(Key = delete_id)\rimage_path = data[\u0026#39;Item\u0026#39;][\u0026#39;image\u0026#39;]\rimage_name = get_image_name(image_path)\rexcept Exception as e:\rerror = e\rtry:\rresponse = table.query(\rProjectionExpression=\u0026#34;rv_id\u0026#34;, KeyConditionExpression=\u0026#34;id = :id\u0026#34;, ExpressionAttributeValues={\u0026#34;:id\u0026#34;: delete_id[\u0026#39;id\u0026#39;]})\rfor item in response[\u0026#39;Items\u0026#39;]:\rdelete_id[\u0026#39;rv_id\u0026#39;] = item[\u0026#39;rv_id\u0026#39;]\rprint(delete_id)\rtable.delete_item(Key = delete_id)\rprint(image_name)\rs3.delete_object(Bucket=\u0026#39;book-image-resize-shop\u0026#39;, Key=image_name)\rexcept Exception as e:\rerror = e\rif error is None:\rmessage = \u0026#39;successfully deleted item!\u0026#39;\relse:\rmessage = \u0026#39;delete item fail\u0026#39;\rstatus = 400\rreturn {\r\u0026#39;statusCode\u0026#39;: status,\r\u0026#39;body\u0026#39;: message,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\r} Chạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy Trở lại với bảng điều khiển của Lambda\nẤn vào function book_delete đã được tạo Ấn sang tab Configuration\nChọn Permissions ở menu phía bên trái Ấn vào role mà function đang thực hiện Mở rộng policy, thấy các quyền đã được cấp cho function Mở bảng điều khiển của Amazon S3, bucket book-image-resize-shop đã được tạo\nẤn chọn bucket đó Ấn sang tab Permissions, thấy policy đã thêm vào bucket Kéo xuống dưới cuối trang, thấy Cross-origin resource sharing đã được thiết lập "
},
{
	"uri": "//localhost:1313/vi/4-config-api-gw/4-3-delete-api/",
	"title": "Tạo DELETE API",
	"tags": [],
	"description": "",
	"content": " Mở tệp template.yaml trong thư mục fcj-book-store Thêm đoạn script sau vào cuối tệp tạo một method DELETE /books/{id}:\rdelete:\rresponses:\r\u0026#34;200\u0026#34;:\rdescription: 200 response\rheaders:\rAccess-Control-Allow-Origin:\rtype: string\rx-amazon-apigateway-integration:\ruri:\rFn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookDelete.Arn}/invocations\u0026#34;\rresponses:\rdefault:\rstatusCode: 200\rresponseParameters:\rmethod.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34;\rpassthroughBehavior: when_no_match\rhttpMethod: POST #always POST\rtype: aws_proxy Thêm đoạn script sau vào cuối của function BookDelete Events:\rDeleteBook:\rType: Api\rProperties:\rPath: /books/{id}\rMethod: delete\rRestApiId:\rRef: BookApi Chạy dòng lệnh dưới đây triển khai SAM sam build\rsam deploy --guided Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;BookDelete may not have authorization defined, Is this okay? [y/N]: \u0026quot;\nMở bảng điều khiển của function book_delete Ấn vào API Gateway Hiện thị API Gateway đang được tương tác với function Ấn vào API Gateway đó Hiện thị các resource và method DELETE Chọn tab Stages ở menu phía bên trái Ấn chọn staging Ấn chọn DELTE Ghi lại InvokeURL của method DELETE Thêm đoạn script sau vào cuối tệp template.yaml để API hỗ trợ các tệp Binary Media Types BinaryMediaTypes: - multipart~1form-data Chạy dòng lệnh dưới đây triển khai SAM sam build\rsam deploy --guided Trở lại với bảng điều khiển của API Chọn Settings ở menu phía bên trái Kéo xuống dưới, kiểm tra xem multipart/form-data đã được thêm hay chưa trong phần Binary Meida Types "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/",
	"title": "Triển khai Lambda function",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ ba Lambda function để ghi, đọc và xoá dữ liệu trong DynamoDB với ngôn ngữ Python dựa trên AWS SAM.\nNội dung Tạo bảng trong DynamoDB Triển khai Lambda function "
},
{
	"uri": "//localhost:1313/vi/3-deploy-lambda-function/3-2-deploy-lambda-function/3-2-4-resize-image-function/",
	"title": "Lambda function chỉnh ảnh",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta tạo một Lambda function mới chỉnh kích thước ảnh sau khi người dùng tải lên.\nMở tệp template.yaml trong thư mục fcj-book-shop Thêm đoạn script sau vào cuối tệp để tạo một function chỉnh ảnh ImageResizer:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: fcj-book-shop/resize_image/function.zip\rPackageType: Zip\rHandler: index.handler\rRuntime: nodejs16.x\rFunctionName: resize_image\rArchitectures:\r- x86_64\rPolicies:\r- Statement:\r- Sid: ResizeUploadImage\rEffect: Allow\rAction:\r- s3:GetObject\r- s3:PutObject\r- s3:DeleteObject\rResource:\r- arn:aws:s3:::book-image-shop/*\r- arn:aws:s3:::book-image-resize-shop/*\rEvents:\rResizeImage:\rType: S3\rProperties:\rBucket: !Ref BookImageShop\rEvents: s3:ObjectCreated:*\rEnvironment:\rVariables:\rWIDTH: 200\rHEIGHT: 280\rDES_BUCKET: book-image-resize-shop Nếu bạn tạo tên của S3 bucket khác với tên trong bài lab, vui lòng kiểm tra Chính sách | Tài nguyên hoặc Môi trường của tài nguyên và cập nhật.\nThêm đoạn script sau vào cuối tệp để cấp quyền cho S3 bucket books-image-shop sử dụng function này LambdaInvokePermission:\rType: \u0026#34;AWS::Lambda::Permission\u0026#34;\rProperties:\rFunctionName: !GetAtt ImageResizer.Arn\rAction: \u0026#34;lambda:InvokeFunction\u0026#34;\rPrincipal: \u0026#34;s3.amazonaws.com\u0026#34;\rSourceAccount: !Sub ${AWS::AccountId}\rSourceArn: !GetAtt BookImageShop.Arn Cấu trúc thư mục như sau:\nfcj-book-shop\r├── fcj-book-shop\r│ ├── books_list\r│ │ └── books_list.py\r│ ├── book_create\r│ │ └── book_create.py\r│ ├── book_delete\r│ │ └── book_delete.py\r│ ├── resize_image\r│ └── function.zip\r└── template.yaml Tạo thư mục tên resize_image trong thư mục fcj-book-shop/fcj-book-shop/ Tải tệp dưới đây và sao chép vào thư mục trên Source code\rfunction.zip\r(8382 ko)\rChạy dòng lệnh dưới đây triển khai SAM\nsam build\rsam deploy Trở lại với bảng điều khiển của Lambda\nẤn vào function resize_image đã được tạo Ấn sang tab Configuration\nChọn mục Trigger ở bên menu bên trái, xuất hiện S3 bucket book-image-shop Chọn mục Permissions ở menu bên trái\nẤn vào role mà function đang thực hiện. Mở rộng policy, thấy các quyền đã được cấp cho function "
},
{
	"uri": "//localhost:1313/vi/4-config-api-gw/",
	"title": "Thiết lập API Gateway",
	"tags": [],
	"description": "",
	"content": "Tiếp theo, chúng ta sẽ thiết lập API Gateway tương tác với các Lambda function đã tạo ở phần trước trên SAM:\nNội dung Tạo GET API Tạo POST API Tạo DELETE API "
},
{
	"uri": "//localhost:1313/vi/5-test-api-by-postman/",
	"title": "Kiểm tra API với Postman",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ kiểm tra hoạt động của các API bằng công cụ Postman\nKiểm tra API đọc Ấn vào dấu + để thêm 1 tab mới Chọn GET method Nhập InvokURL của GET API đã ghi lại từ bước trước Ấn nút Send Kết quả trả về là toàn bộ dữ liệu của bảng Books đã qua xử lý Kiểm tra API ghi Tương tự tạo một tab mới Chọn POST method Nhập InvokURL của POST API đã ghi lại từ bước trước Trong mục Body, chọn raw Sao chép đoạn dưới đây: {\r\u0026#34;id\u0026#34;: \u0026#34;5\u0026#34;,\r\u0026#34;rv_id\u0026#34;: 0,\r\u0026#34;name\u0026#34;: \u0026#34;Amazon Web Services in Action 2nd Edition\u0026#34;,\r\u0026#34;author\u0026#34;: \u0026#34;Andreas Wittig\u0026#34;,\r\u0026#34;price\u0026#34;: \u0026#34;59.99\u0026#34;,\r\u0026#34;category\u0026#34;: \u0026#34;IT\u0026#34;,\r\u0026#34;description\u0026#34;: \u0026#34;Amazon Web Services in Action, Second Edition is a comprehensive introduction to computing, storing, and networking in the AWS cloud. You\u0026#39;ll find clear, relevant coverage of all the essential AWS services you to know, emphasizing best practices for security, high availability and scalability.\u0026#34;,\r\u0026#34;image\u0026#34;: \u0026#34;https://book-image-resize-store.s3.ap-southeast-2.amazonaws.com/aws.jpg\u0026#34;\r} Chuyển sang mục Headers Thêm KEY là Content-Type, VALUE là application/json Ấn nút Send Đợi một chút, xem kết quả trả về Mở bảng Books trong bảng điều khiển của DynamoDB kiểm tra dữ liệu Trước khi gọi API ghi Sau khi gọi API ghi Kiểm tra API xoá Vì Lambda function xoá khi thực hiện sẽ xoá ảnh được tải lên bởi người dùng, nên chúng ta tải thủ công ảnh lên S3 bucket để API có thể chạy đúng.\nMở bảng điều khiển của Amazon S3 Ấn vào bucket book-image-store Ấn nút Upload Ấn nút Add files Tải ảnh sau về máy của bạn và chọn nó để tải lên bucket Image\raws.jpg\r(24 ko)\r6. Ấn nút Upload\nSau khi tải xong, chuyển sang bucket book-image-resize-store kiểm tra. Đây là kết quả chạy của reszie_image Lambda funtion Trở lại với Postman, thêm một tab mới để thực hiện API xoá Chọn DELETE method Nhập InvokeURL của DELETE API đã ghi lại từ bước trước, thay /{id} bằng /5 Ấn nút Send Kiểm tra kết quả trả về: Mở bảng Books trong bảng điều khiển của DynamoDB kiểm tra dữ liệu Mở bucket book-image-resize-store kiểm tra kết quả. Ảnh aws.jpg đã xoá. "
},
{
	"uri": "//localhost:1313/vi/6-test-front-end/",
	"title": "Kiểm tra API với front-end",
	"tags": [],
	"description": "",
	"content": "Sau khi kiểm tra các API hoạt động đúng với Postman, chúng ta sẽ kiểm tra các API được gọi với front-end xây dựng từ bước 2.\nMở tệp config.js trong thư mục fcj-serverless-frontend đã được tải về từ phần 2 Thay giá trị cho APP_API_URL bằng URL của bạn: Mở tệp App.js trong thư mục fcj-serverless-frontend/src/, sửa giá trị của biến isAdmin thành true Chạy các dòng lệnh dưới đây: yarn build\raws s3 cp build s3://fcj-book-store --recursive Dán endpoint của S3 static web vào browser của bạn. Ứng dụng đã hiện thông tin sách, nhưng vẫn chưa có ảnh vì chúng ta chưa tải ảnh lên. Vậy API đọc dữ liệu đã hoạt động đúng.\nKiểm tra API ghi dữ liệu: Ấn sang tab Management Ấn nút Update Sửa bất kỳ thông tin gì bạn muốn trừ id Ấn nút Choose image Đưa ảnh dưới đây tải lên bucket: Image\rDockerInAction.jpeg\r(33 ko)\rẤn nút Update Ấn nút OK Ảnh và thông tin được cập nhật Ấn sang tab Create new book ghi dữ liệu mới vào cơ sở dữ liệu Nhập id bằng 5 Nhập tên: Amazon Web Services in Action Nhập tác giả: Andreas Wittig Nhập thể loại: IT Nhập giá: 59.99 Nhập mô tả: Amazon Web Services in Action, Second Edition is a comprehensive introduction to computing, storing, and networking in the AWS cloud. You'll find clear, relevant coverage of all the essential AWS services you to know, emphasizing best practices for security, high availability and scalability. Image\raws.jpg\r(24 ko)\rẤn nút Choose File để tải ảnh lên Ấn nút Create Ấn nút OK Hiển thị thông tin vừa tạo Kiểm tra API xoá Ấn sang tab Management Ấn nút Update Ấn nút Delete Ấn nút OK để xác nhận xoá Ấn nút OK Xem kết quả sau khi xoá: không còn xuất hiện thông tin sách nữa Chúng ta đã hoàn thành việc xây dựng một ứng dụng web đơn giản theo mô hình serverless. Để xây dựng ứng dụng serverless nhanh hơn, trong phần tiếp theo chúng ta sẽ sử dụng AWS Serverless Application Model (SAM). SAM cung cấp cú pháp để diễn đạt các hàm, API, cơ sở dữ liệu và event source mappings.\n"
},
{
	"uri": "//localhost:1313/vi/7-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Làm rỗng S3 bucket Mở bảng điều khiển của AWS S3 Chọn fcj-book-store Ấn Empty Nhập permanently delete Ấn Empty Làm tương tự với bucket bắt đầu bằng aws-sam-cli-managed-default- Xoá stack của CloudFormation Chạy câu lệnh dưới đây để xoá ứng dụng AWS SAM sam delete --stack-name fcj-book-store\rsam delete --stack-name aws-sam-cli-managed-default "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]